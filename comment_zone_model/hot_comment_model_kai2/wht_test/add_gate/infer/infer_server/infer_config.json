{
  "_CONFIG_VERSION": "f099256d0f1db85398cd2b9c23aa90dc_local",
  "_DRAGONFLY_CREATE_TIME": "2024-06-06 16:57:32",
  "_DRAGONFLY_VERSION": "0.8.0",
  "attrs_from_request": {
    "common_attr": [
      "photo_author_id",
      "photo_id"
    ],
    "item_attr": [
      "author_id",
      "dislike_cnt",
      "like_cnt",
      "minute_diff",
      "quality_v2_score",
      "realshow_cnt",
      "reply_cnt"
    ]
  },
  "default_request_type": "comment_new_label",
  "kess_config": {
    "service_name": "grpc_commentZoneActionInfer_wht"
  },
  "pipeline_manager_config": {
    "base_pipeline": {
      "processor": {
        "_branch_controller_B29C42BE": {
          "$branch_start": "_branch_controller_B29C42BE",
          "$code_info": "[if] B29C42BE infer.py in prepare(): .if_(\"#(user_profile or '') > 0\")",
          "$metadata": {
            "$input_common_attrs": [
              "user_profile"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_2"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_2"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "user_profile"
          ],
          "lua_script": "function evaluate() if (#(user_profile or '') > 0) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_F39EF552": {
          "$branch_start": "_branch_controller_F39EF552",
          "$code_info": "[if] F39EF552 infer.py in prepare(): .if_(\"request_item_num == 0\")",
          "$metadata": {
            "$input_common_attrs": [
              "request_item_num"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_1"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_1"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "request_item_num"
          ],
          "lua_script": "function evaluate() if (request_item_num == 0) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "copy_item_meta_info_6E522F": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_id"
            ]
          },
          "save_item_key_to_attr": "comment_id",
          "type_name": "CommonRecoItemMetaInfoEnricher"
        },
        "copy_user_meta_info_17EC10": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "device_id",
              "user_id"
            ],
            "$output_item_attrs": []
          },
          "save_device_id_to_attr": "device_id",
          "save_user_id_to_attr": "user_id",
          "type_name": "CommonRecoUserMetaInfoEnricher"
        },
        "count_reco_result_A90E0C": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "request_item_num"
            ],
            "$output_item_attrs": []
          },
          "save_result_size_to_common_attr": "request_item_num",
          "type_name": "CommonRecoCountRecoResultEnricher"
        },
        "deduplicate_BBE8FF": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "type_name": "CommonRecoResultsDeduplicateArranger"
        },
        "enrich_attr_by_lua_1F9899": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "like_cnt",
              "realshow_cnt",
              "reply_cnt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "ltr",
              "rtr"
            ]
          },
          "export_item_attr": [
            "ltr",
            "rtr"
          ],
          "function_for_item": "cal_xtr",
          "import_item_attr": [
            "like_cnt",
            "reply_cnt",
            "realshow_cnt"
          ],
          "lua_script": "function cal_xtr()\n            return like_cnt / (realshow_cnt + 1.0), reply_cnt / (realshow_cnt + 1.0)\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_4AC68B": {
          "$metadata": {
            "$input_common_attrs": [
              "user_profile_values"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "age_segment",
              "gender"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "gender",
            "age_segment"
          ],
          "function_for_common": "cal",
          "import_common_attr": [
            "user_profile_values"
          ],
          "lua_script": "function cal()\n            if #(user_profile_values or {}) >= 2 then\n              return user_profile_values[1], user_profile_values[2]\n            else\n              return 0, 0\n            end\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "extract_kuiba_parameter_5F7AAA": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "author_id",
              "comment_id",
              "dislike_cnt",
              "like_cnt",
              "ltr",
              "minute_diff",
              "reply_cnt",
              "rtr",
              "showAction"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_item_signs",
              "comment_item_slots"
            ]
          },
          "config": {
            "author_id": {
              "attrs": [
                {
                  "attr": [
                    "author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 202
                }
              ]
            },
            "comment_id": {
              "attrs": [
                {
                  "attr": [
                    "comment_id"
                  ],
                  "converter": "id",
                  "key_type": 201,
                  "mio_slot_key_type": 201
                }
              ]
            },
            "dislike_cnt": {
              "attrs": [
                {
                  "attr": [
                    "dislike_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "3,0,100000,1,0",
                  "key_type": 209,
                  "mio_slot_key_type": 209
                }
              ]
            },
            "like_cnt": {
              "attrs": [
                {
                  "attr": [
                    "like_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 203,
                  "mio_slot_key_type": 203
                }
              ]
            },
            "ltr": {
              "attrs": [
                {
                  "attr": [
                    "ltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 206,
                  "mio_slot_key_type": 206
                }
              ]
            },
            "minute_diff": {
              "attrs": [
                {
                  "attr": [
                    "minute_diff"
                  ],
                  "converter": "discrete",
                  "converter_args": "36,0,336,1,0",
                  "key_type": 205,
                  "mio_slot_key_type": 205
                }
              ]
            },
            "reply_cnt": {
              "attrs": [
                {
                  "attr": [
                    "reply_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 204,
                  "mio_slot_key_type": 204
                }
              ]
            },
            "rtr": {
              "attrs": [
                {
                  "attr": [
                    "rtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 207,
                  "mio_slot_key_type": 207
                }
              ]
            },
            "showAction": {
              "attrs": [
                {
                  "attr": [
                    "showAction"
                  ],
                  "converter": "id",
                  "key_type": 208,
                  "mio_slot_key_type": 208
                }
              ]
            }
          },
          "is_common_attr": false,
          "parameters_output": "comment_item_signs",
          "slots_output": "comment_item_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "extract_kuiba_parameter_67B29A": {
          "$metadata": {
            "$input_common_attrs": [
              "age_segment",
              "device_id",
              "gender",
              "photo_author_id",
              "photo_id",
              "user_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$output_item_attrs": []
          },
          "config": {
            "age_segment": {
              "attrs": [
                {
                  "attr": [
                    "age_segment"
                  ],
                  "converter": "id",
                  "key_type": 102,
                  "mio_slot_key_type": 102
                }
              ]
            },
            "device_id": {
              "attrs": [
                {
                  "attr": [
                    "device_id"
                  ],
                  "converter": "id",
                  "key_type": 106,
                  "mio_slot_key_type": 106
                }
              ]
            },
            "gender": {
              "attrs": [
                {
                  "attr": [
                    "gender"
                  ],
                  "converter": "id",
                  "key_type": 101,
                  "mio_slot_key_type": 101
                }
              ]
            },
            "photo_author_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 104
                }
              ]
            },
            "photo_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_id"
                  ],
                  "converter": "id",
                  "key_type": 103,
                  "mio_slot_key_type": 103
                }
              ]
            },
            "user_id": {
              "attrs": [
                {
                  "attr": [
                    "user_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 105
                }
              ]
            }
          },
          "is_common_attr": true,
          "parameters_output": "comment_common_signs",
          "slots_output": "comment_common_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "get_common_attr_from_redis_7B2CD9": {
          "$eval_common_attrs": [
            "user_id"
          ],
          "$metadata": {
            "$input_common_attrs": [
              "user_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_profile"
            ],
            "$output_item_attrs": []
          },
          "cache_bits": 20,
          "cache_expire_second": 43200,
          "cache_name": "infer_comment_user_profile_cache",
          "cluster_name": "recoPoiCategoryMapping",
          "redis_params": [
            {
              "output_attr_name": "user_profile",
              "redis_key": "{{return 'cm_profile_'..tostring(user_id or 0)}}"
            }
          ],
          "type_name": "CommonRecoRedisCommonAttrEnricher"
        },
        "return__28C561": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_1"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "skip": "{{_if_control_attr_1}}",
          "status_code": 0,
          "type_name": "CommonRecoExecutionStatusEnricher"
        },
        "set_attr_value_C82E6E": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "showAction"
            ]
          },
          "item_attrs": [
            {
              "name": "showAction",
              "type": "int",
              "value": 1
            }
          ],
          "type_name": "CommonRecoItemAttrDefaultValueEnricher"
        },
        "split_string_B8ECA2": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_2",
              "user_profile"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_profile_values"
            ],
            "$output_item_attrs": []
          },
          "delimiters": ",",
          "input_common_attr": "user_profile",
          "output_common_attr": "user_profile_values",
          "parse_to_int": true,
          "skip": "{{_if_control_attr_2}}",
          "type_name": "CommonRecoStringSplitEnricher"
        },
        "uni_predict_fused_2B29FF": {
          "$metadata": {
            "$input_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$input_item_attrs": [
              "comment_item_signs",
              "comment_item_slots"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "audience_xtr",
              "copy_xtr",
              "expand_xtr",
              "like_xtr",
              "reply_xtr",
              "share_xtr"
            ]
          },
          "batching_config": {
            "batch_task_type": "BatchTensorflowTask",
            "batch_timeout_micros": 0,
            "max_batch_size": 4096,
            "max_enqueued_batches": 1
          },
          "debug_tensor": false,
          "embedding_fetchers": [
            {
              "client_side_shard": true,
              "common_parameters_inputs": [
                "comment_common_signs"
              ],
              "common_slots_inputs": [
                "comment_common_slots"
              ],
              "fetcher_type": "BtEmbeddingServerFetcher",
              "kess_service": "grpc_commentZoneActionEmb_wht",
              "max_signs_per_request": 500,
              "parameters_inputs": [
                "comment_item_signs"
              ],
              "shards": 1,
              "slots_config": [
                {
                  "compress_group": "USER",
                  "dim": 4,
                  "dtype": "mio_int16",
                  "input_name": "user_embedding",
                  "slots": "101 102",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "c_id_embedding",
                  "slots": "201 202",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "c_info_embedding",
                  "slots": "203 204 205 206 207 209",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "position_embedding",
                  "slots": "208",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "c_udp_id_embedding",
                  "slots": "103 104 105 106",
                  "tensor_dtype": "float32"
                }
              ],
              "slots_inputs": [
                "comment_item_slots"
              ],
              "timeout_ms": 50
            }
          ],
          "executor_config": {
            "inter_op_parallelism_threads_num": 32,
            "intra_op_parallelism_threads_num": 32
          },
          "graph": "base64:",
          "inputs": [
            {
              "attr_name": "user_embedding",
              "compress_group": "USER",
              "dim": 8,
              "tensor_name": "user_embedding"
            },
            {
              "attr_name": "c_id_embedding",
              "dim": 128,
              "tensor_name": "c_id_embedding"
            },
            {
              "attr_name": "c_info_embedding",
              "dim": 192,
              "tensor_name": "c_info_embedding"
            },
            {
              "attr_name": "position_embedding",
              "dim": 8,
              "tensor_name": "position_embedding"
            },
            {
              "attr_name": "c_udp_id_embedding",
              "dim": 256,
              "tensor_name": "c_udp_id_embedding"
            }
          ],
          "key": "hot_comment_xtr_add_copy_share",
          "model_loader_config": {
            "executor_batchsizes": [
              512,
              1024,
              2048,
              4096
            ],
            "implicit_batch": true,
            "receive_dnn_model_as_macro_block": true,
            "rowmajor": true,
            "type": "MioTFExecutedByTensorFlowModelLoader"
          },
          "outputs": [
            {
              "attr_name": "expand_xtr",
              "common": false,
              "tensor_name": "expand_xtr/dense_3/Sigmoid:0"
            },
            {
              "attr_name": "like_xtr",
              "common": false,
              "tensor_name": "like_xtr/dense_3/Sigmoid:0"
            },
            {
              "attr_name": "reply_xtr",
              "common": false,
              "tensor_name": "reply_xtr/dense_3/Sigmoid:0"
            },
            {
              "attr_name": "copy_xtr",
              "common": false,
              "tensor_name": "copy_xtr/dense_3/Sigmoid:0"
            },
            {
              "attr_name": "share_xtr",
              "common": false,
              "tensor_name": "share_xtr/dense_3/Sigmoid:0"
            },
            {
              "attr_name": "audience_xtr",
              "common": false,
              "tensor_name": "audience_xtr/dense_3/Sigmoid:0"
            }
          ],
          "param": [
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense/kernel",
              "rown": 592,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            }
          ],
          "queue_prefix": "hot_comment_xtr_add_copy_share",
          "type_name": "UniPredictFusedItemAttrEnricher"
        }
      },
      "type_name": "CommonRecoPipeline"
    },
    "pipeline_map": {
      "comment_new_label": {
        "__PARENT": "base_pipeline",
        "pipeline": [
          "deduplicate_BBE8FF",
          "count_reco_result_A90E0C",
          "_branch_controller_F39EF552",
          "return__28C561",
          "copy_user_meta_info_17EC10",
          "copy_item_meta_info_6E522F",
          "set_attr_value_C82E6E",
          "get_common_attr_from_redis_7B2CD9",
          "_branch_controller_B29C42BE",
          "split_string_B8ECA2",
          "enrich_attr_by_lua_4AC68B",
          "enrich_attr_by_lua_1F9899",
          "extract_kuiba_parameter_67B29A",
          "extract_kuiba_parameter_5F7AAA",
          "uni_predict_fused_2B29FF"
        ]
      }
    }
  },
  "request_type_config": {
    "comment_new_label": [
      "comment_new_label"
    ]
  },
  "return_item_attrs": [
    "audience_xtr",
    "copy_xtr",
    "expand_xtr",
    "like_xtr",
    "reply_xtr",
    "share_xtr"
  ]
}