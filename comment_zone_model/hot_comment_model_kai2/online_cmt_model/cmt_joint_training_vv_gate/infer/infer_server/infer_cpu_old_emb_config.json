{
  "_CONFIG_VERSION": "698ffd705f824d35907ad60db1d8a9fe_local",
  "_DRAGONFLY_CREATE_TIME": "2025-02-07 15:55:27",
  "_DRAGONFLY_VERSION": "0.8.3",
  "attrs_from_request": {
    "common_attr": [
      "age_segment",
      "gender",
      "mod",
      "page_type_str",
      "photo_author_id",
      "photo_id"
    ],
    "item_attr": [
      "author_id",
      "comment_content",
      "comment_genre",
      "content_length",
      "dislike_cnt",
      "like_cnt",
      "minute_diff",
      "realshow_cnt",
      "reply_cnt"
    ]
  },
  "default_request_type": "hot_comment_default",
  "kess_config": {
    "service_name": "grpc_HotCommentXtrJointBertInferCpu"
  },
  "pipeline_manager_config": {
    "base_pipeline": {
      "processor": {
        "_branch_controller_F39EF552": {
          "$branch_start": "_branch_controller_F39EF552",
          "$code_info": "[if] F39EF552 infer_cpu_old_emb.py in prepare(): .if_(\"request_item_num == 0\")",
          "$metadata": {
            "$input_common_attrs": [
              "request_item_num"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_1"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_1"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "request_item_num"
          ],
          "lua_script": "function evaluate() if (request_item_num == 0) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "copy_item_meta_info_6E522F": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_id"
            ]
          },
          "save_item_key_to_attr": "comment_id",
          "type_name": "CommonRecoItemMetaInfoEnricher"
        },
        "copy_user_meta_info_17EC10": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "device_id",
              "user_id"
            ],
            "$output_item_attrs": []
          },
          "save_device_id_to_attr": "device_id",
          "save_user_id_to_attr": "user_id",
          "type_name": "CommonRecoUserMetaInfoEnricher"
        },
        "count_reco_result_A90E0C": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "request_item_num"
            ],
            "$output_item_attrs": []
          },
          "save_result_size_to_common_attr": "request_item_num",
          "type_name": "CommonRecoCountRecoResultEnricher"
        },
        "deduplicate_BBE8FF": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "type_name": "CommonRecoResultsDeduplicateArranger"
        },
        "enrich_attr_by_lua_3E45FD": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "comment_id"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "bert_id"
            ]
          },
          "export_item_attr": [
            "bert_id"
          ],
          "function_for_item": "copy",
          "import_item_attr": [
            "comment_id"
          ],
          "lua_script": "function copy()\n                return comment_id\n            end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_C36279": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "like_cnt",
              "realshow_cnt",
              "reply_cnt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "ltr",
              "rtr"
            ]
          },
          "export_item_attr": [
            "ltr",
            "rtr"
          ],
          "function_for_item": "cal_xtr",
          "import_item_attr": [
            "like_cnt",
            "reply_cnt",
            "realshow_cnt"
          ],
          "lua_script": "function cal_xtr()\n                local vv = realshow_cnt or 0.0\n                local ltr = like_cnt / (vv + 1.0)\n                local rtr = reply_cnt / (vv + 1.0)\n                return ltr, rtr\n            end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "extract_kuiba_parameter_52D8D3": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "author_id",
              "bert_id",
              "comment_genre",
              "comment_id",
              "content_length",
              "dislike_cnt",
              "like_cnt",
              "ltr",
              "minute_diff",
              "realshow_cnt",
              "reply_cnt",
              "rtr",
              "showAction"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_item_signs",
              "comment_item_slots"
            ]
          },
          "config": {
            "author_id": {
              "attrs": [
                {
                  "attr": [
                    "author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 202
                }
              ]
            },
            "bert_id": {
              "attrs": [
                {
                  "attr": [
                    "bert_id"
                  ],
                  "converter": "id",
                  "key_type": 252,
                  "mio_slot_key_type": 252
                }
              ]
            },
            "comment_genre": {
              "attrs": [
                {
                  "attr": [
                    "comment_genre"
                  ],
                  "converter": "id",
                  "key_type": 250,
                  "mio_slot_key_type": 250
                }
              ]
            },
            "comment_id": {
              "attrs": [
                {
                  "attr": [
                    "comment_id"
                  ],
                  "converter": "id",
                  "key_type": 201,
                  "mio_slot_key_type": 201
                }
              ]
            },
            "content_length": {
              "attrs": [
                {
                  "attr": [
                    "content_length"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,1000,1,0",
                  "key_type": 251,
                  "mio_slot_key_type": 251
                }
              ]
            },
            "dislike_cnt": {
              "attrs": [
                {
                  "attr": [
                    "dislike_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "3,0,100000,1,0",
                  "key_type": 209,
                  "mio_slot_key_type": 209
                }
              ]
            },
            "like_cnt": {
              "attrs": [
                {
                  "attr": [
                    "like_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 203,
                  "mio_slot_key_type": 203
                }
              ]
            },
            "ltr": {
              "attrs": [
                {
                  "attr": [
                    "ltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 206,
                  "mio_slot_key_type": 206
                }
              ]
            },
            "minute_diff": {
              "attrs": [
                {
                  "attr": [
                    "minute_diff"
                  ],
                  "converter": "discrete",
                  "converter_args": "36,0,336,1,0",
                  "key_type": 205,
                  "mio_slot_key_type": 205
                }
              ]
            },
            "realshow_cnt": {
              "attrs": [
                {
                  "attr": [
                    "realshow_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "100,0,10000,1,0",
                  "key_type": 260,
                  "mio_slot_key_type": 260
                }
              ]
            },
            "reply_cnt": {
              "attrs": [
                {
                  "attr": [
                    "reply_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 204,
                  "mio_slot_key_type": 204
                }
              ]
            },
            "rtr": {
              "attrs": [
                {
                  "attr": [
                    "rtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 207,
                  "mio_slot_key_type": 207
                }
              ]
            },
            "showAction": {
              "attrs": [
                {
                  "attr": [
                    "showAction"
                  ],
                  "converter": "id",
                  "key_type": 208,
                  "mio_slot_key_type": 208
                }
              ]
            }
          },
          "is_common_attr": false,
          "parameters_output": "comment_item_signs",
          "slots_output": "comment_item_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "extract_kuiba_parameter_531C91": {
          "$metadata": {
            "$input_common_attrs": [
              "age_segment",
              "device_id",
              "gender",
              "mod",
              "page_type_str",
              "photo_author_id",
              "photo_id",
              "user_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$output_item_attrs": []
          },
          "config": {
            "age_segment": {
              "attrs": [
                {
                  "attr": [
                    "age_segment"
                  ],
                  "converter": "id",
                  "key_type": 102,
                  "mio_slot_key_type": 102
                }
              ]
            },
            "device_id": {
              "attrs": [
                {
                  "attr": [
                    "device_id"
                  ],
                  "converter": "id",
                  "key_type": 106,
                  "mio_slot_key_type": 106
                }
              ]
            },
            "gender": {
              "attrs": [
                {
                  "attr": [
                    "gender"
                  ],
                  "converter": "id",
                  "key_type": 101,
                  "mio_slot_key_type": 101
                }
              ]
            },
            "mod": {
              "attrs": [
                {
                  "attr": [
                    "mod"
                  ],
                  "converter": "id",
                  "key_type": 110,
                  "mio_slot_key_type": 110
                }
              ]
            },
            "page_type_str": {
              "attrs": [
                {
                  "attr": [
                    "page_type_str"
                  ],
                  "converter": "id",
                  "key_type": 111,
                  "mio_slot_key_type": 111
                }
              ]
            },
            "photo_author_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 104
                }
              ]
            },
            "photo_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_id"
                  ],
                  "converter": "id",
                  "key_type": 103,
                  "mio_slot_key_type": 103
                }
              ]
            },
            "user_id": {
              "attrs": [
                {
                  "attr": [
                    "user_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 105
                }
              ]
            }
          },
          "is_common_attr": true,
          "parameters_output": "comment_common_signs",
          "slots_output": "comment_common_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "return__28C561": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_1"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "skip": "{{_if_control_attr_1}}",
          "status_code": 0,
          "type_name": "CommonRecoExecutionStatusEnricher"
        },
        "set_attr_value_C82E6E": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "showAction"
            ]
          },
          "item_attrs": [
            {
              "name": "showAction",
              "type": "int",
              "value": 1
            }
          ],
          "type_name": "CommonRecoItemAttrDefaultValueEnricher"
        },
        "uni_predict_fused_F63ABE": {
          "$metadata": {
            "$input_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$input_item_attrs": [
              "comment_item_signs",
              "comment_item_slots"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "audience_xtr",
              "continuous_expand_xtr",
              "copy_xtr",
              "duration_predict",
              "expand_xtr",
              "hate_xtr",
              "like_xtr",
              "reply_xtr",
              "share_xtr"
            ]
          },
          "batching_config": {
            "batch_task_type": "BatchTensorflowTask",
            "batch_timeout_micros": 0,
            "max_batch_size": 4096,
            "max_enqueued_batches": 1
          },
          "debug_tensor": false,
          "embedding_fetchers": [
            {
              "client_side_shard": true,
              "common_parameters_inputs": [
                "comment_common_signs"
              ],
              "common_slots_inputs": [
                "comment_common_slots"
              ],
              "fetcher_type": "BtEmbeddingServerFetcher",
              "kess_service": "grpc_HotCommentXtrJointBertEmb",
              "max_signs_per_request": 500,
              "parameters_inputs": [
                "comment_item_signs"
              ],
              "shards": 2,
              "slots_config": [
                {
                  "compress_group": "USER",
                  "dim": 4,
                  "dtype": "mio_int16",
                  "input_name": "user_embedding",
                  "slots": "101 102",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "pid_embedding",
                  "slots": "103",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "aid_embedding",
                  "slots": "104",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "uid_embedding",
                  "slots": "105",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "did_embedding",
                  "slots": "106",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "context_embedding",
                  "slots": "110 111",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "c_id_embedding",
                  "slots": "201 202",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "c_info_embedding",
                  "slots": "203 204 205 206 207 209",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "position_embedding",
                  "slots": "208",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "comment_genre_embedding",
                  "slots": "250",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "comment_length_embedding",
                  "slots": "251",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 256,
                  "dtype": "mio_int16",
                  "input_name": "bert_id_embedding",
                  "slots": "252",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "gate_embedding",
                  "slots": "260",
                  "tensor_dtype": "float32"
                }
              ],
              "slots_inputs": [
                "comment_item_slots"
              ],
              "timeout_ms": 50
            }
          ],
          "executor_config": {
            "inter_op_parallelism_threads_num": 32,
            "intra_op_parallelism_threads_num": 32
          },
          "graph": "base64:",
          "inputs": [
            {
              "attr_name": "user_embedding",
              "compress_group": "USER",
              "dim": 8,
              "tensor_name": "user_embedding"
            },
            {
              "attr_name": "pid_embedding",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "pid_embedding"
            },
            {
              "attr_name": "aid_embedding",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "aid_embedding"
            },
            {
              "attr_name": "uid_embedding",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "uid_embedding"
            },
            {
              "attr_name": "did_embedding",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "did_embedding"
            },
            {
              "attr_name": "context_embedding",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "context_embedding"
            },
            {
              "attr_name": "c_id_embedding",
              "dim": 128,
              "tensor_name": "c_id_embedding"
            },
            {
              "attr_name": "c_info_embedding",
              "dim": 192,
              "tensor_name": "c_info_embedding"
            },
            {
              "attr_name": "position_embedding",
              "dim": 8,
              "tensor_name": "position_embedding"
            },
            {
              "attr_name": "comment_genre_embedding",
              "dim": 8,
              "tensor_name": "comment_genre_embedding"
            },
            {
              "attr_name": "comment_length_embedding",
              "dim": 32,
              "tensor_name": "comment_length_embedding"
            },
            {
              "attr_name": "bert_id_embedding",
              "dim": 256,
              "tensor_name": "bert_id_embedding"
            },
            {
              "attr_name": "gate_embedding",
              "dim": 32,
              "tensor_name": "gate_embedding"
            }
          ],
          "key": "cmt_rank_bert_vv_gate",
          "model_loader_config": {
            "executor_batchsizes": [
              512,
              1024,
              2048,
              4096
            ],
            "implicit_batch": true,
            "receive_dnn_model_as_macro_block": true,
            "rowmajor": true,
            "type": "MioTFExecutedByTensorFlowModelLoader"
          },
          "outputs": [
            {
              "attr_name": "expand_xtr",
              "common": false,
              "tensor_name": "expand_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "like_xtr",
              "common": false,
              "tensor_name": "like_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "reply_xtr",
              "common": false,
              "tensor_name": "reply_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "copy_xtr",
              "common": false,
              "tensor_name": "copy_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "share_xtr",
              "common": false,
              "tensor_name": "share_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "audience_xtr",
              "common": false,
              "tensor_name": "audience_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "continuous_expand_xtr",
              "common": false,
              "tensor_name": "continuous_expand_xtr/dense_1/Sigmoid:0"
            },
            {
              "attr_name": "duration_predict",
              "common": false,
              "tensor_name": "duration_predict/dense_1/Relu:0"
            },
            {
              "attr_name": "hate_xtr",
              "common": false,
              "tensor_name": "hate_xtr/dense_3/Sigmoid:0"
            }
          ],
          "param": [
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/embeddings/word_embeddings",
              "rown": 21128,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/embeddings/token_type_embeddings",
              "rown": 2,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/embeddings/position_embeddings",
              "rown": 512,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/embeddings/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/embeddings/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_0/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_0/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_0/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_0/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_1/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_1/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_1/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_1/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_2/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_2/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_2/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_2/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_3/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_3/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_3/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_3/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_4/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_4/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_4/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_4/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/attention/self/query/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/self/query/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/attention/self/key/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/self/key/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/attention/self/value/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/self/value/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/attention/output/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_5/attention/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1024,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/intermediate/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/intermediate/dense/bias",
              "rank": 1,
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/encoder/layer_5/output/dense/kernel",
              "rown": 1024,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/output/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/encoder/layer_5/output/LayerNorm/beta",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "bert/encoder/layer_5/output/LayerNorm/gamma",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "bert/pooler/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "bert/pooler/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "action_input/dense/kernel",
              "rown": 688,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "action_input/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "action_input/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "action_input/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "content_input/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "content_input/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "gate_input/dense/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "gate_input/dense/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "continuous_expand_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "continuous_expand_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "continuous_expand_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "continuous_expand_xtr/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "hate_xtr/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "hate_xtr/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "hate_xtr/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "hate_xtr/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "hate_xtr/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "hate_xtr/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "hate_xtr/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "hate_xtr/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "duration_predict/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "duration_predict/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "duration_predict/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "duration_predict/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "duration_pos_bias_predict/dense/kernel",
              "rown": 136,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "duration_pos_bias_predict/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "duration_pos_bias_predict/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "duration_pos_bias_predict/dense_1/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "duration_pos_bias_predict/dense_2/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "duration_pos_bias_predict/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            }
          ],
          "queue_prefix": "cmt_rank_bert_vv_gate",
          "type_name": "UniPredictFusedItemAttrEnricher"
        }
      },
      "type_name": "CommonRecoPipeline"
    },
    "pipeline_map": {
      "comment_new_label": {
        "__PARENT": "base_pipeline",
        "pipeline": [
          "deduplicate_BBE8FF",
          "count_reco_result_A90E0C",
          "_branch_controller_F39EF552",
          "return__28C561",
          "copy_user_meta_info_17EC10",
          "copy_item_meta_info_6E522F",
          "set_attr_value_C82E6E",
          "enrich_attr_by_lua_C36279",
          "enrich_attr_by_lua_3E45FD",
          "extract_kuiba_parameter_531C91",
          "extract_kuiba_parameter_52D8D3",
          "uni_predict_fused_F63ABE"
        ]
      }
    }
  },
  "request_type_config": {
    "hot_comment_default": [
      "comment_new_label"
    ]
  },
  "return_item_attrs": [
    "audience_xtr",
    "continuous_expand_xtr",
    "copy_xtr",
    "duration_predict",
    "expand_xtr",
    "hate_xtr",
    "like_xtr",
    "reply_xtr",
    "share_xtr"
  ]
}