{
  "_CONFIG_VERSION": "73bcafb21a2e443eb08d7c32922e36c5_local",
  "_DRAGONFLY_CREATE_TIME": "2025-02-08 17:06:21",
  "_DRAGONFLY_VERSION": "0.8.2",
  "attrs_from_request": {
    "common_attr": [
      "age_segment",
      "device_id",
      "gender",
      "llsid",
      "photo_author_id",
      "photo_id",
      "user_id"
    ],
    "item_attr": [
      "audience_pxtr",
      "author_id",
      "comment_genre",
      "comment_id",
      "continuous_expand_pxtr",
      "copy_pxtr",
      "dislike_cnt",
      "duration_predict",
      "expand_pxtr",
      "like_cnt",
      "like_pxtr",
      "minute_diff",
      "mmu_category_tag",
      "mmu_emotion_tag",
      "realshow_cnt",
      "reply_cnt",
      "reply_pxtr",
      "risk_inactive_tag",
      "risk_insult_tag",
      "risk_negative_tag",
      "share_pxtr"
    ]
  },
  "default_request_type": "comment_zone_action",
  "kess_config": {
    "service_name": "grpc_commentZoneListwiseRerankAllSampleGen"
  },
  "pipeline_manager_config": {
    "base_pipeline": {
      "processor": {
        "_branch_controller_F39EF552": {
          "$branch_start": "_branch_controller_F39EF552",
          "$code_info": "[if] F39EF552 infer.py in prepare(): .if_(\"request_item_num == 0\")",
          "$metadata": {
            "$input_common_attrs": [
              "request_item_num"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_1"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_1"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "request_item_num"
          ],
          "lua_script": "function evaluate() if (request_item_num == 0) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "copy_item_meta_info_6E522F": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_id"
            ]
          },
          "save_item_key_to_attr": "comment_id",
          "type_name": "CommonRecoItemMetaInfoEnricher"
        },
        "copy_user_meta_info_043C97": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_id"
            ],
            "$output_item_attrs": []
          },
          "save_user_id_to_attr": "user_id",
          "type_name": "CommonRecoUserMetaInfoEnricher"
        },
        "count_reco_result_A90E0C": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "request_item_num"
            ],
            "$output_item_attrs": []
          },
          "save_result_size_to_common_attr": "request_item_num",
          "type_name": "CommonRecoCountRecoResultEnricher"
        },
        "deduplicate_BBE8FF": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "type_name": "CommonRecoResultsDeduplicateArranger"
        },
        "enrich_attr_by_lua_1EDCCE": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "like_cnt",
              "realshow_cnt",
              "reply_cnt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "ltr",
              "mask_pack",
              "rtr"
            ]
          },
          "export_item_attr": [
            "ltr",
            "rtr",
            "mask_pack"
          ],
          "function_for_item": "cal_xtr",
          "import_item_attr": [
            "like_cnt",
            "reply_cnt",
            "realshow_cnt"
          ],
          "lua_script": "function cal_xtr()\n            return like_cnt / (realshow_cnt + 1.0), reply_cnt / (realshow_cnt + 1.0), {1.0}\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "extract_kuiba_parameter_5DD346": {
          "$metadata": {
            "$input_common_attrs": [
              "age_segment",
              "gender",
              "photo_author_id",
              "photo_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$output_item_attrs": []
          },
          "config": {
            "age_segment": {
              "attrs": [
                {
                  "attr": [
                    "age_segment"
                  ],
                  "converter": "id",
                  "key_type": 102,
                  "mio_slot_key_type": 102
                }
              ]
            },
            "gender": {
              "attrs": [
                {
                  "attr": [
                    "gender"
                  ],
                  "converter": "id",
                  "key_type": 101,
                  "mio_slot_key_type": 101
                }
              ]
            },
            "photo_author_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 104
                }
              ]
            },
            "photo_id": {
              "attrs": [
                {
                  "attr": [
                    "photo_id"
                  ],
                  "converter": "id",
                  "key_type": 103,
                  "mio_slot_key_type": 103
                }
              ]
            }
          },
          "is_common_attr": true,
          "parameters_output": "comment_common_signs",
          "slots_output": "comment_common_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "extract_kuiba_parameter_684333": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "audience_pxtr",
              "author_id",
              "comment_genre",
              "comment_id",
              "continuous_expand_pxtr",
              "copy_pxtr",
              "dislike_cnt",
              "expand_pxtr",
              "like_cnt",
              "like_pxtr",
              "ltr",
              "minute_diff",
              "mmu_category_tag",
              "mmu_emotion_tag",
              "reply_cnt",
              "reply_pxtr",
              "risk_insult_tag",
              "risk_negative_tag",
              "rtr",
              "share_pxtr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_item_signs",
              "comment_item_slots"
            ]
          },
          "config": {
            "audience_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "audience_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 247,
                  "mio_slot_key_type": 247
                }
              ]
            },
            "author_id": {
              "attrs": [
                {
                  "attr": [
                    "author_id"
                  ],
                  "converter": "id",
                  "key_type": 202,
                  "mio_slot_key_type": 202
                }
              ]
            },
            "comment_genre": {
              "attrs": [
                {
                  "attr": [
                    "comment_genre"
                  ],
                  "converter": "id",
                  "key_type": 209,
                  "mio_slot_key_type": 209
                }
              ]
            },
            "comment_id": {
              "attrs": [
                {
                  "attr": [
                    "comment_id"
                  ],
                  "converter": "id",
                  "key_type": 201,
                  "mio_slot_key_type": 201
                }
              ]
            },
            "continuous_expand_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "continuous_expand_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 244,
                  "mio_slot_key_type": 244
                }
              ]
            },
            "copy_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "copy_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 245,
                  "mio_slot_key_type": 245
                }
              ]
            },
            "dislike_cnt": {
              "attrs": [
                {
                  "attr": [
                    "dislike_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "3,0,100000,1,0",
                  "key_type": 208,
                  "mio_slot_key_type": 208
                }
              ]
            },
            "expand_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "expand_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 243,
                  "mio_slot_key_type": 243
                }
              ]
            },
            "like_cnt": {
              "attrs": [
                {
                  "attr": [
                    "like_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 203,
                  "mio_slot_key_type": 203
                }
              ]
            },
            "like_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "like_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 241,
                  "mio_slot_key_type": 241
                }
              ]
            },
            "ltr": {
              "attrs": [
                {
                  "attr": [
                    "ltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,100000,137,0",
                  "key_type": 206,
                  "mio_slot_key_type": 206
                }
              ]
            },
            "minute_diff": {
              "attrs": [
                {
                  "attr": [
                    "minute_diff"
                  ],
                  "converter": "discrete",
                  "converter_args": "3,0,14400,1,0",
                  "key_type": 205,
                  "mio_slot_key_type": 205
                }
              ]
            },
            "mmu_category_tag": {
              "attrs": [
                {
                  "attr": [
                    "mmu_category_tag"
                  ],
                  "converter": "id",
                  "key_type": 213,
                  "mio_slot_key_type": 213
                }
              ]
            },
            "mmu_emotion_tag": {
              "attrs": [
                {
                  "attr": [
                    "mmu_emotion_tag"
                  ],
                  "converter": "id",
                  "key_type": 214,
                  "mio_slot_key_type": 214
                }
              ]
            },
            "reply_cnt": {
              "attrs": [
                {
                  "attr": [
                    "reply_cnt"
                  ],
                  "converter": "discrete",
                  "converter_args": "5,0,100000,1,0",
                  "key_type": 204,
                  "mio_slot_key_type": 204
                }
              ]
            },
            "reply_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "reply_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 242,
                  "mio_slot_key_type": 242
                }
              ]
            },
            "risk_insult_tag": {
              "attrs": [
                {
                  "attr": [
                    "risk_insult_tag"
                  ],
                  "converter": "id",
                  "key_type": 210,
                  "mio_slot_key_type": 210
                }
              ]
            },
            "risk_negative_tag": {
              "attrs": [
                {
                  "attr": [
                    "risk_negative_tag"
                  ],
                  "converter": "id",
                  "key_type": 211,
                  "mio_slot_key_type": 211
                }
              ]
            },
            "rtr": {
              "attrs": [
                {
                  "attr": [
                    "rtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,100000,137,0",
                  "key_type": 207,
                  "mio_slot_key_type": 207
                }
              ]
            },
            "share_pxtr": {
              "attrs": [
                {
                  "attr": [
                    "share_pxtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.001,0,1000,1,0",
                  "key_type": 246,
                  "mio_slot_key_type": 246
                }
              ]
            }
          },
          "is_common_attr": false,
          "parameters_output": "comment_item_signs",
          "slots_output": "comment_item_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "log_debug_info_164BC7": {
          "$metadata": {
            "$input_common_attrs": [
              "age_segment",
              "gender"
            ],
            "$input_item_attrs": [
              "audience_xtr",
              "continuous_xtr",
              "copy_xtr",
              "dislike_cnt",
              "expand_xtr",
              "like_cnt",
              "like_xtr",
              "ltr",
              "minute_diff",
              "realshow_cnt",
              "reply_cnt",
              "reply_xtr",
              "rtr",
              "share_xtr",
              "staytime_xtr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "common_attrs": [
            "gender",
            "age_segment"
          ],
          "for_debug_request_only": false,
          "item_attrs": [
            "expand_xtr",
            "like_xtr",
            "reply_xtr",
            "copy_xtr",
            "share_xtr",
            "audience_xtr",
            "continuous_xtr",
            "staytime_xtr",
            "like_cnt",
            "reply_cnt",
            "realshow_cnt",
            "ltr",
            "rtr",
            "dislike_cnt",
            "minute_diff"
          ],
          "respect_sample_logging": true,
          "type_name": "CommonRecoDebugInfoObserver"
        },
        "perflog_attr_value_B172FF": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "audience_xtr",
              "continuous_xtr",
              "copy_xtr",
              "dislike_cnt",
              "expand_xtr",
              "like_cnt",
              "like_xtr",
              "ltr",
              "minute_diff",
              "realshow_cnt",
              "reply_cnt",
              "reply_xtr",
              "rtr",
              "share_xtr",
              "staytime_xtr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "check_point": "comment.infer",
          "item_attrs": [
            "expand_xtr",
            "like_xtr",
            "reply_xtr",
            "copy_xtr",
            "share_xtr",
            "audience_xtr",
            "continuous_xtr",
            "staytime_xtr",
            "like_cnt",
            "reply_cnt",
            "realshow_cnt",
            "ltr",
            "rtr",
            "dislike_cnt",
            "minute_diff"
          ],
          "type_name": "CommonRecoAttrValuePerflogObserver"
        },
        "return__28C561": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_1"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "skip": "{{_if_control_attr_1}}",
          "status_code": 0,
          "type_name": "CommonRecoExecutionStatusEnricher"
        },
        "uni_predict_fused_9D967A": {
          "$metadata": {
            "$input_common_attrs": [
              "comment_common_signs",
              "comment_common_slots"
            ],
            "$input_item_attrs": [
              "comment_item_signs",
              "comment_item_slots",
              "mask_pack"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "audience_xtr",
              "continuous_xtr",
              "copy_xtr",
              "expand_xtr",
              "like_xtr",
              "reply_xtr",
              "share_xtr",
              "staytime_xtr"
            ]
          },
          "batching_config": {
            "batch_task_type": "BatchTensorflowTask",
            "batch_timeout_micros": 0,
            "max_batch_size": 1024,
            "max_enqueued_batches": 1
          },
          "debug_tensor": false,
          "embedding_fetchers": [
            {
              "client_side_shard": true,
              "common_parameters_inputs": [
                "comment_common_signs"
              ],
              "common_slots_inputs": [
                "comment_common_slots"
              ],
              "fetcher_type": "BtEmbeddingServerFetcher",
              "kess_service": "grpc_commentZoneListwiseRerankAllSampleEmb",
              "max_signs_per_request": 500,
              "parameters_inputs": [
                "comment_item_signs"
              ],
              "shards": 1,
              "slots_config": [
                {
                  "compress_group": "USER",
                  "dim": 4,
                  "dtype": "mio_int16",
                  "input_name": "user_embedding",
                  "slots": "101 102",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "photo_embedding",
                  "slots": "103 104",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 64,
                  "dtype": "mio_int16",
                  "input_name": "c_id_embedding",
                  "slots": "201 202",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "c_info_embedding",
                  "slots": "203 204 205 206 207 208",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 4,
                  "dtype": "mio_int16",
                  "input_name": "c_content_embedding",
                  "slots": "209 210 211 212 213 214",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "c_rank_pxtr_embedding",
                  "slots": "241 242 243 244 245 246 247",
                  "tensor_dtype": "float32"
                }
              ],
              "slots_inputs": [
                "comment_item_slots"
              ],
              "timeout_ms": 50
            }
          ],
          "executor_config": {
            "inter_op_parallelism_threads_num": 32,
            "intra_op_parallelism_threads_num": 32
          },
          "graph": "base64:",
          "inputs": [
            {
              "attr_name": "user_embedding",
              "compress_group": "USER",
              "dim": 8,
              "tensor_name": "user_embedding"
            },
            {
              "attr_name": "photo_embedding",
              "compress_group": "USER",
              "dim": 128,
              "tensor_name": "photo_embedding"
            },
            {
              "attr_name": "c_id_embedding",
              "dim": 128,
              "tensor_name": "c_id_embedding"
            },
            {
              "attr_name": "c_info_embedding",
              "dim": 48,
              "tensor_name": "c_info_embedding"
            },
            {
              "attr_name": "c_content_embedding",
              "dim": 24,
              "tensor_name": "c_content_embedding"
            },
            {
              "attr_name": "c_rank_pxtr_embedding",
              "dim": 56,
              "tensor_name": "c_rank_pxtr_embedding"
            },
            {
              "attr_name": "mask_pack",
              "common": false,
              "dim": 1,
              "tensor_name": "mask_pack"
            }
          ],
          "key": "hot_comment_rerank_all_sample",
          "model_loader_config": {
            "executor_batchsizes": [
              512,
              1024
            ],
            "implicit_batch": true,
            "receive_dnn_model_as_macro_block": true,
            "rowmajor": true,
            "type": "MioTFExecutedByTensorFlowModelLoader"
          },
          "outputs": [
            {
              "attr_name": "expand_xtr",
              "common": false,
              "tensor_name": "Reshape_1:0"
            },
            {
              "attr_name": "like_xtr",
              "common": false,
              "tensor_name": "Reshape_2:0"
            },
            {
              "attr_name": "reply_xtr",
              "common": false,
              "tensor_name": "Reshape_3:0"
            },
            {
              "attr_name": "copy_xtr",
              "common": false,
              "tensor_name": "Reshape_4:0"
            },
            {
              "attr_name": "share_xtr",
              "common": false,
              "tensor_name": "Reshape_5:0"
            },
            {
              "attr_name": "audience_xtr",
              "common": false,
              "tensor_name": "Reshape_6:0"
            },
            {
              "attr_name": "continuous_xtr",
              "common": false,
              "tensor_name": "Reshape_7:0"
            },
            {
              "attr_name": "staytime_xtr",
              "common": false,
              "tensor_name": "truediv:0"
            }
          ],
          "param": [
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "multi_head_attention/dense/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "multi_head_attention/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "multi_head_attention/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "multi_head_attention/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "multi_head_attention/dense_2/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "multi_head_attention/dense_2/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "multi_head_attention/multi_head_attention_norm/gamma_multi_head_attention_norm",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 1,
              "init_range": 0,
              "name": "multi_head_attention/multi_head_attention_norm/beta_multi_head_attention_norm",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "expand_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "expand_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "reply_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "reply_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "copy_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "copy_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "share_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "share_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "audience_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "audience_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "continuous_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "continuous_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "continuous_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "continuous_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "continuous_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "continuous_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "staytime_xtr/dense/kernel",
              "rown": 264,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "staytime_xtr/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "staytime_xtr/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "staytime_xtr/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "staytime_xtr/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "staytime_xtr/dense_2/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            }
          ],
          "queue_prefix": "hot_comment_rerank_all_sample",
          "type_name": "UniPredictFusedItemAttrEnricher"
        }
      },
      "type_name": "CommonRecoPipeline"
    },
    "pipeline_map": {
      "comment_zone_infer": {
        "__PARENT": "base_pipeline",
        "pipeline": [
          "deduplicate_BBE8FF",
          "count_reco_result_A90E0C",
          "_branch_controller_F39EF552",
          "return__28C561",
          "copy_user_meta_info_043C97",
          "copy_item_meta_info_6E522F",
          "enrich_attr_by_lua_1EDCCE",
          "extract_kuiba_parameter_5DD346",
          "extract_kuiba_parameter_684333",
          "uni_predict_fused_9D967A",
          "log_debug_info_164BC7",
          "perflog_attr_value_B172FF"
        ]
      }
    }
  },
  "request_type_config": {
    "comment_zone_action": [
      "comment_zone_infer"
    ]
  },
  "return_item_attrs": [
    "audience_xtr",
    "continuous_xtr",
    "copy_xtr",
    "expand_xtr",
    "like_xtr",
    "reply_xtr",
    "share_xtr",
    "staytime_xtr"
  ]
}