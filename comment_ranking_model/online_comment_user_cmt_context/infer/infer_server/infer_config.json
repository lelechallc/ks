{
  "_CONFIG_VERSION": "305776b8b115fec9af3c729a16334727_local",
  "_DRAGONFLY_CREATE_TIME": "2024-12-05 18:59:56",
  "_DRAGONFLY_VERSION": "0.7.21",
  "attrs_from_request": {
    "common_attr": [
      "tab_id",
      "user_info_str"
    ],
    "item_attr": [
      "cascade_pcestr",
      "cascade_pctr",
      "cascade_pepstr",
      "cascade_pftr",
      "cascade_phtr",
      "cascade_pltr",
      "cascade_plvtr",
      "cascade_psvr",
      "cascade_pwtr",
      "empirical_cmtr",
      "empirical_ctr",
      "empirical_ftr",
      "empirical_htr",
      "empirical_ltr",
      "empirical_ptr",
      "empirical_wtr",
      "pcltr",
      "pcmef",
      "pcmtr",
      "pctr",
      "pepstr",
      "pftr",
      "photo_info_str",
      "phtr",
      "pltr",
      "plvtr",
      "pptr",
      "pvtr",
      "pwtd",
      "pwtr",
      "reason"
    ]
  },
  "default_request_type": "slide_multi_task_comment_user_cluster_debias",
  "kess_config": {
    "service_name": "grpc_interactUserClusterDebiasInfer"
  },
  "pipeline_manager_config": {
    "base_pipeline": {
      "processor": {
        "_branch_controller_182D0D1D": {
          "$branch_start": "_branch_controller_182D0D1D",
          "$code_info": "[if] 182D0D1D infer.py in calc_revert_score(): .if_(\"(tab_id or 0) == 10000 and (enable_playtime_causal_debias_model_gamora or 0) == 1 or (tab_id or 0) == 30000 and (enable_playtime_causal_debias_model_nebula or 0) == 1\")",
          "$metadata": {
            "$input_common_attrs": [
              "enable_playtime_causal_debias_model_gamora",
              "enable_playtime_causal_debias_model_nebula",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_6"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_6"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "enable_playtime_causal_debias_model_gamora",
            "enable_playtime_causal_debias_model_nebula",
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 10000 and (enable_playtime_causal_debias_model_gamora or 0) == 1 or (tab_id or 0) == 30000 and (enable_playtime_causal_debias_model_nebula or 0) == 1) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_65D2AB26": {
          "$branch_start": "_branch_controller_E8369171",
          "$code_info": "[else_if] 65D2AB26 infer.py in extract_feature(): .else_if_(\"(tab_id or 0) == 30000\")",
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_1",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_elseif_control_attr_2"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_elseif_control_attr_2"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "_if_control_attr_1",
            "tab_id"
          ],
          "lua_script": "function evaluate() if (_if_control_attr_1 == 1 and ((tab_id or 0) == 30000)) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_65D2AB26_1": {
          "$branch_start": "_branch_controller_E8369171_1",
          "$code_info": "[else_if] 65D2AB26 infer.py in extract_feature(): .else_if_(\"(tab_id or 0) == 30000\")",
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_3",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_elseif_control_attr_4"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_elseif_control_attr_4"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "_if_control_attr_3",
            "tab_id"
          ],
          "lua_script": "function evaluate() if (_if_control_attr_3 == 1 and ((tab_id or 0) == 30000)) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_7227719B": {
          "$branch_start": "_branch_controller_7227719B",
          "$code_info": "[if] 7227719B infer.py in calc_revert_score(): .if_(\"(tab_id or 0) == 10000 and (slide_fr_interact_wt_score_infer_norm_gamora or 0) == 1 or (tab_id or 0) == 30000 and (slide_fr_interact_wt_score_infer_norm_nebula or 0) == 1\")",
          "$metadata": {
            "$input_common_attrs": [
              "slide_fr_interact_wt_score_infer_norm_gamora",
              "slide_fr_interact_wt_score_infer_norm_nebula",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_5"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_5"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "slide_fr_interact_wt_score_infer_norm_gamora",
            "slide_fr_interact_wt_score_infer_norm_nebula",
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 10000 and (slide_fr_interact_wt_score_infer_norm_gamora or 0) == 1 or (tab_id or 0) == 30000 and (slide_fr_interact_wt_score_infer_norm_nebula or 0) == 1) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_7C491A0A": {
          "$branch_start": "_branch_controller_7C491A0A",
          "$code_info": "[if] 7C491A0A infer.py in calc_revert_score(): .if_(\"(tab_id or 0) == 10000 and (enable_long_view_counter_causal_model_gamora or 0) == 1 \")",
          "$metadata": {
            "$input_common_attrs": [
              "enable_long_view_counter_causal_model_gamora",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_7"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_7"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "enable_long_view_counter_causal_model_gamora",
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 10000 and (enable_long_view_counter_causal_model_gamora or 0) == 1 ) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_D7CB6857": {
          "$branch_start": "_branch_controller_D7CB6857",
          "$code_info": "[if] D7CB6857 infer.py in calc_revert_score(): .if_(\"(tab_id or 0) == 30000 and (enable_long_view_counter_causal_model_nebula or 0) == 1\")",
          "$metadata": {
            "$input_common_attrs": [
              "enable_long_view_counter_causal_model_nebula",
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_8"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_8"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "enable_long_view_counter_causal_model_nebula",
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 30000 and (enable_long_view_counter_causal_model_nebula or 0) == 1) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_E8369171": {
          "$branch_start": "_branch_controller_E8369171",
          "$code_info": "[if] E8369171 infer.py in extract_feature(): .if_(\"(tab_id or 0) == 10000\")",
          "$metadata": {
            "$input_common_attrs": [
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_1"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_1"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 10000) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "_branch_controller_E8369171_1": {
          "$branch_start": "_branch_controller_E8369171_1",
          "$code_info": "[if] E8369171 infer.py in extract_feature(): .if_(\"(tab_id or 0) == 10000\")",
          "$metadata": {
            "$input_common_attrs": [
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "_if_control_attr_3"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "_if_control_attr_3"
          ],
          "for_branch_control": true,
          "function_for_common": "evaluate",
          "import_common_attr": [
            "tab_id"
          ],
          "lua_script": "function evaluate() if ((tab_id or 0) == 10000) then return false else return true end end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "arrange_by_sub_flow_43BCA6": {
          "$metadata": {
            "$input_common_attrs": [
              "battery_charging",
              "battery_level",
              "collect_hetu_one",
              "collect_hetu_two",
              "collect_photo_ids",
              "comment_hetu_one",
              "comment_hetu_two",
              "comment_photo_ids",
              "follow_hetu_one",
              "follow_hetu_two",
              "follow_photo_ids",
              "forward_hetu_one",
              "forward_hetu_two",
              "forward_photo_ids",
              "headset_state",
              "human_action",
              "like_hetu_one",
              "like_hetu_two",
              "like_photo_ids",
              "net_state",
              "profile_enter_hetu_one",
              "profile_enter_hetu_two",
              "profile_enter_photo_ids",
              "screen_light",
              "tab_id",
              "user_info"
            ],
            "$input_item_attrs": [
              "cascade_pcestr",
              "cascade_pctr",
              "cascade_pepstr",
              "cascade_pftr",
              "cascade_phtr",
              "cascade_pltr",
              "cascade_plvtr",
              "cascade_psvr",
              "cascade_pwtr",
              "context_info",
              "empirical_cmtr",
              "empirical_ctr",
              "empirical_ftr",
              "empirical_htr",
              "empirical_ltr",
              "empirical_ptr",
              "empirical_wtr",
              "follow_status",
              "pcltr",
              "pcmef",
              "pcmtr",
              "pctr",
              "pepstr",
              "pftr",
              "photo_info",
              "phtr",
              "pltr",
              "plvtr",
              "pptr",
              "pvtr",
              "pwtd",
              "pwtr",
              "reason_string",
              "tab_id",
              "user_app_cluster_level",
              "user_comment_cluster_level"
            ],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "at_comment",
              "click_comment_score",
              "comment_consume_depth",
              "comment_copyward",
              "comment_effective_read",
              "comment_like",
              "comment_slide_down",
              "comment_stay_time_score",
              "comment_unfold",
              "effective_read_comment_fresh_score",
              "eft_click_cmt",
              "eft_write_cmt",
              "emoji_comment",
              "follow",
              "forward_inside",
              "gif_comment",
              "image_comment",
              "interact_score",
              "long_view_counter_factual_score_cmt",
              "long_view_counter_factual_score_no_cmt",
              "playtime_after_click_comment_score",
              "sub_comment",
              "text_comment",
              "uplift_comment_consume_depth_score",
              "uplift_comment_stay_duration_score"
            ]
          },
          "expected_partition_size": 64,
          "flow_name": "predict_sub_flow",
          "merge_item_attrs": [
            "at_comment",
            "click_comment_score",
            "comment_consume_depth",
            "comment_copyward",
            "comment_effective_read",
            "comment_like",
            "comment_slide_down",
            "comment_stay_time_score",
            "comment_unfold",
            "effective_read_comment_fresh_score",
            "eft_click_cmt",
            "eft_write_cmt",
            "emoji_comment",
            "follow",
            "forward_inside",
            "gif_comment",
            "image_comment",
            "interact_score",
            "long_view_counter_factual_score_cmt",
            "long_view_counter_factual_score_no_cmt",
            "playtime_after_click_comment_score",
            "sub_comment",
            "text_comment",
            "uplift_comment_consume_depth_score",
            "uplift_comment_stay_duration_score"
          ],
          "pass_common_attrs": [
            "battery_charging",
            "battery_level",
            "collect_hetu_one",
            "collect_hetu_two",
            "collect_photo_ids",
            "comment_hetu_one",
            "comment_hetu_two",
            "comment_photo_ids",
            "follow_hetu_one",
            "follow_hetu_two",
            "follow_photo_ids",
            "forward_hetu_one",
            "forward_hetu_two",
            "forward_photo_ids",
            "headset_state",
            "human_action",
            "like_hetu_one",
            "like_hetu_two",
            "like_photo_ids",
            "net_state",
            "profile_enter_hetu_one",
            "profile_enter_hetu_two",
            "profile_enter_photo_ids",
            "screen_light",
            "tab_id",
            "user_info"
          ],
          "pass_item_attrs": [
            "cascade_pcestr",
            "cascade_pctr",
            "cascade_pepstr",
            "cascade_pftr",
            "cascade_phtr",
            "cascade_pltr",
            "cascade_plvtr",
            "cascade_psvr",
            "cascade_pwtr",
            "context_info",
            "empirical_cmtr",
            "empirical_ctr",
            "empirical_ftr",
            "empirical_htr",
            "empirical_ltr",
            "empirical_ptr",
            "empirical_wtr",
            "follow_status",
            "pcltr",
            "pcmef",
            "pcmtr",
            "pctr",
            "pepstr",
            "pftr",
            "photo_info",
            "phtr",
            "pltr",
            "plvtr",
            "pptr",
            "pvtr",
            "pwtd",
            "pwtr",
            "reason_string",
            "tab_id",
            "user_app_cluster_level",
            "user_comment_cluster_level"
          ],
          "type_name": "CommonRecoPipelineArranger"
        },
        "build_protobuf_247E20": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "cascade_pctr",
              "cascade_pltr",
              "cascade_plvtr",
              "cascade_psvr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "context_info"
            ]
          },
          "class_name": "ks.reco.ContextInfo",
          "inputs": [
            {
              "item_attr": "cascade_pctr",
              "path": "cascade_pctr"
            },
            {
              "item_attr": "cascade_pltr",
              "path": "cascade_pltr"
            },
            {
              "item_attr": "cascade_psvr",
              "path": "cascade_psvr"
            },
            {
              "item_attr": "cascade_plvtr",
              "path": "cascade_plvtr"
            }
          ],
          "output_item_attr": "context_info",
          "type_name": "CommonRecoProtobufBuildAttrEnricher"
        },
        "calc_by_formula1_20B962": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_7"
            ],
            "$input_item_attrs": [
              "click_comment_score",
              "long_view_counter_factual_score_cmt",
              "long_view_counter_factual_score_no_cmt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "playtime_after_click_comment_score"
            ]
          },
          "abtest_biz_name": "THANOS_RECO",
          "export_formula_value": [
            {
              "as": "playtime_after_click_comment_score",
              "name": "score"
            }
          ],
          "import_item_attr": [
            {
              "as": "lvf_score",
              "default_val": 0.0,
              "name": "long_view_counter_factual_score_cmt"
            },
            {
              "as": "lvcf_score",
              "default_val": 0.0,
              "name": "long_view_counter_factual_score_no_cmt"
            },
            {
              "as": "pccmt",
              "default_val": 0.0,
              "name": "click_comment_score"
            }
          ],
          "kconf_key": "formula.scenarioKey92.slide_gamora_cmt_long_view_counter_causal_f1",
          "skip": "{{_if_control_attr_7}}",
          "type_name": "CommonRecoFormulaOneEnricher"
        },
        "calc_by_formula1_D22215": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_8"
            ],
            "$input_item_attrs": [
              "click_comment_score",
              "long_view_counter_factual_score_cmt",
              "long_view_counter_factual_score_no_cmt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "playtime_after_click_comment_score"
            ]
          },
          "abtest_biz_name": "THANOS_RECO",
          "export_formula_value": [
            {
              "as": "playtime_after_click_comment_score",
              "name": "score"
            }
          ],
          "import_item_attr": [
            {
              "as": "lvf_score",
              "default_val": 0.0,
              "name": "long_view_counter_factual_score_cmt"
            },
            {
              "as": "lvcf_score",
              "default_val": 0.0,
              "name": "long_view_counter_factual_score_no_cmt"
            },
            {
              "as": "pccmt",
              "default_val": 0.0,
              "name": "click_comment_score"
            }
          ],
          "kconf_key": "formula.scenarioKey81.slide_nebula_cmt_long_view_counter_causal_f1",
          "skip": "{{_if_control_attr_8}}",
          "type_name": "CommonRecoFormulaOneEnricher"
        },
        "copy_attr_0F4C86": {
          "$metadata": {
            "$input_common_attrs": [
              "user_comment_cluster_level_pre"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "user_comment_cluster_level"
            ]
          },
          "attrs": [
            {
              "from_common": "user_comment_cluster_level_pre",
              "to_item": "user_comment_cluster_level"
            }
          ],
          "type_name": "CommonRecoCopyAttrEnricher"
        },
        "copy_attr_145969": {
          "$metadata": {
            "$input_common_attrs": [
              "tab_id"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "tab_id"
            ]
          },
          "attrs": [
            {
              "from_common": "tab_id",
              "to_item": "tab_id"
            }
          ],
          "type_name": "CommonRecoCopyAttrEnricher"
        },
        "copy_attr_776BC1": {
          "$metadata": {
            "$input_common_attrs": [
              "user_app_cluster_level_pre"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "user_app_cluster_level"
            ]
          },
          "attrs": [
            {
              "from_common": "user_app_cluster_level_pre",
              "to_item": "user_app_cluster_level"
            }
          ],
          "type_name": "CommonRecoCopyAttrEnricher"
        },
        "copy_user_meta_info_1D895F": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "uid"
            ],
            "$output_item_attrs": []
          },
          "save_user_id_to_attr": "uid",
          "type_name": "CommonRecoUserMetaInfoEnricher"
        },
        "deduplicate_BBE8FF": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "type_name": "CommonRecoResultsDeduplicateArranger"
        },
        "enrich_attr_by_lua_070FF6": {
          "$metadata": {
            "$input_common_attrs": [
              "_elseif_control_attr_2",
              "uid"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "cmt_cluste_uid_str"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "cmt_cluste_uid_str"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "uid"
          ],
          "lua_script": "function calculate()\n                    cmt_cluste_uid_str = \"cmt_cluster_cmt-\" .. tostring(uid) .. \"-NEBULA\"\n                    return cmt_cluste_uid_str\n                end",
          "skip": "{{_elseif_control_attr_2}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_32B148": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "click_comment_score",
              "comment_stay_time_score",
              "comment_unfold"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "click_comment_button",
              "post_at_comment"
            ]
          },
          "export_item_attr": [
            "click_comment_button",
            "post_at_comment"
          ],
          "function_for_item": "rename",
          "import_item_attr": [
            "click_comment_score",
            "comment_stay_time_score",
            "comment_unfold"
          ],
          "lua_script": "function rename()\n            return click_comment_score * comment_stay_time_score, comment_unfold\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_3C7399": {
          "$metadata": {
            "$input_common_attrs": [
              "_elseif_control_attr_4",
              "uid"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "app_cluster_uid_str"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "app_cluster_uid_str"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "uid"
          ],
          "lua_script": "function calculate()\n                    app_cluster_uid_str = \"cmt_cluster_app-\" .. tostring(uid) .. \"-NEBULA\"\n                    return app_cluster_uid_str\n                end",
          "skip": "{{_elseif_control_attr_4}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_3CF759": {
          "$metadata": {
            "$input_common_attrs": [
              "user_app_cluster_level_pre"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_app_cluster_level_pre"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "user_app_cluster_level_pre"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "user_app_cluster_level_pre"
          ],
          "lua_script": "function calculate()\n                  user_app_cluster_level_pre = tonumber(user_app_cluster_level_pre) * 1.0 or 0.0\n                  return {user_app_cluster_level_pre}\n              end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_5A68C9": {
          "$metadata": {
            "$input_common_attrs": [
              "BidFollowList",
              "FollowList"
            ],
            "$input_item_attrs": [
              "author_id"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "follow_status"
            ]
          },
          "export_item_attr": [
            "follow_status"
          ],
          "function_for_item": "reset_follow",
          "import_common_attr": [
            "FollowList",
            "BidFollowList"
          ],
          "import_item_attr": [
            "author_id"
          ],
          "lua_script": "function value_include(tab, value)\n            if tab ~= nil then\n              for k, v in pairs(tab) do\n                if v == value then\n                  return 1\n                end\n              end\n            end\n            return 0\n          end\n\n          function reset_follow()\n            local follow_status = 0  -- 标记单关 已关 双关\n            local author_id = author_id or 0\n            local FollowList = FollowList or {}\n            local BidFollowList = BidFollowList or {}\n            if value_include(FollowList, author_id) == 1 then\n              follow_status = 1\n            end\n            if value_include(BidFollowList, author_id) == 1 then\n              follow_status = 2\n            end\n            return follow_status\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_81376C": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_1",
              "uid"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "cmt_cluste_uid_str"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "cmt_cluste_uid_str"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "uid"
          ],
          "lua_script": "function calculate()\n                    cmt_cluste_uid_str = \"cmt_cluster_cmt-\" .. tostring(uid) .. \"-KUAISHOU\"\n                    return cmt_cluste_uid_str\n                end",
          "skip": "{{_if_control_attr_1}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_98D0CC": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "cascade_pcestr",
              "cascade_pctr",
              "cascade_pepstr",
              "cascade_pftr",
              "cascade_phtr",
              "cascade_pltr",
              "cascade_plvtr",
              "cascade_psvr",
              "cascade_pwtr",
              "empirical_cmtr",
              "empirical_ctr",
              "empirical_ftr",
              "empirical_htr",
              "empirical_ltr",
              "empirical_ptr",
              "empirical_wtr",
              "pcltr",
              "pcmef",
              "pcmtr",
              "pctr",
              "pepstr",
              "pftr",
              "phtr",
              "pltr",
              "plvtr",
              "pptr",
              "pvtr",
              "pwtd",
              "pwtr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "cascade_pcestrs",
              "cascade_pctrs",
              "cascade_pepstrs",
              "cascade_pftrs",
              "cascade_phtrs",
              "cascade_pltrs",
              "cascade_plvtrs",
              "cascade_psvrs",
              "cascade_pwtrs",
              "empirical_cmtrs",
              "empirical_ctrs",
              "empirical_ftrs",
              "empirical_htrs",
              "empirical_ltrs",
              "empirical_ptrs",
              "empirical_wtrs",
              "pcltrs",
              "pcmefs",
              "pcmtrs",
              "pctrs",
              "pepstrs",
              "pftrs",
              "phtrs",
              "pltrs",
              "plvtrs",
              "pptrs",
              "pvtrs",
              "pwtds",
              "pwtrs"
            ]
          },
          "export_item_attr": [
            "pctrs",
            "pltrs",
            "pcltrs",
            "pftrs",
            "pwtrs",
            "plvtrs",
            "pvtrs",
            "pptrs",
            "pcmtrs",
            "phtrs",
            "pepstrs",
            "pcmefs",
            "pwtds",
            "empirical_ctrs",
            "empirical_ltrs",
            "empirical_ftrs",
            "empirical_wtrs",
            "empirical_ptrs",
            "empirical_htrs",
            "empirical_cmtrs",
            "cascade_pctrs",
            "cascade_plvtrs",
            "cascade_psvrs",
            "cascade_pltrs",
            "cascade_pwtrs",
            "cascade_pftrs",
            "cascade_phtrs",
            "cascade_pepstrs",
            "cascade_pcestrs"
          ],
          "function_for_item": "tolist",
          "import_item_attr": [
            "pctr",
            "pltr",
            "pcltr",
            "pftr",
            "pwtr",
            "plvtr",
            "pvtr",
            "pptr",
            "pcmtr",
            "phtr",
            "pepstr",
            "pcmef",
            "pwtd",
            "empirical_ctr",
            "empirical_ltr",
            "empirical_ftr",
            "empirical_wtr",
            "empirical_ptr",
            "empirical_htr",
            "empirical_cmtr",
            "cascade_pctr",
            "cascade_plvtr",
            "cascade_psvr",
            "cascade_pltr",
            "cascade_pwtr",
            "cascade_pftr",
            "cascade_phtr",
            "cascade_pepstr",
            "cascade_pcestr"
          ],
          "lua_script": "function tolist()\n            local pctr = pctr or 0.0\n            local pltr = pltr or 0.0\n            local pcltr = pcltr or 0.0\n            local pftr = pftr or 0.0\n            local pwtr = pwtr or 0.0\n            local plvtr = plvtr or 0.0\n            local pvtr = pvtr or 0.0\n            local pptr = pptr or 0.0\n            local pcmtr = pcmtr or 0.0\n            local phtr = phtr or 0.0\n            local pepstr = pepstr or 0.0\n            local pcmef = pcmef or 0.0\n            local pwtd = pwtd or 0.0\n            local empirical_ctr = empirical_ctr or 0.0\n            local empirical_ltr = empirical_ltr or 0.0\n            local empirical_ftr = empirical_ftr or 0.0\n            local empirical_wtr = empirical_wtr or 0.0\n            local empirical_ptr = empirical_ptr or 0.0\n            local empirical_htr = empirical_htr or 0.0\n            local empirical_cmtr = empirical_cmtr or 0.0\n            local cascade_pctr = cascade_pctr or 0.0 \n            local cascade_plvtr = cascade_plvtr or 0.0\n            local cascade_psvr = cascade_psvr or 0.0\n            local cascade_pltr = cascade_pltr or 0.0\n            local cascade_pwtr = cascade_pwtr or 0.0 \n            local cascade_pftr = cascade_pftr or 0.0\n            local cascade_phtr = cascade_phtr or 0.0\n            local cascade_pepstr = cascade_pepstr or 0.0\n            local cascade_pcestr = cascade_pcestr or 0.0\n\n            return {pctr}, {pltr}, {pcltr}, {pftr}, {pwtr}, {plvtr}, {pvtr}, {pptr}, {pcmtr},\n                  {phtr}, {pepstr}, {pcmef}, {pwtd}, \n                  {empirical_ctr}, {empirical_ltr}, {empirical_ftr}, {empirical_wtr},\n                  {empirical_ptr}, {empirical_htr}, {empirical_cmtr},\n                  {cascade_pctr}, {cascade_plvtr}, {cascade_psvr}, {cascade_pltr},\n                  {cascade_pwtr}, {cascade_pftr}, {cascade_phtr}, {cascade_pepstr}, {cascade_pcestr}\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_A17D98": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_5"
            ],
            "$input_item_attrs": [
              "comment_stay_time_score"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "comment_stay_time_score"
            ]
          },
          "export_item_attr": [
            "comment_stay_time_score"
          ],
          "function_for_item": "revert",
          "import_item_attr": [
            "comment_stay_time_score"
          ],
          "lua_script": "function revert()\n            local comment_score = comment_stay_time_score or 0\n            if comment_score > 0 and comment_score < 1 then\n                comment_score = comment_score / (1.0 - comment_score)\n            end\n            return comment_score\n          end",
          "skip": "{{_if_control_attr_5}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_ACBBF1": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "reason"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "reason_string"
            ]
          },
          "export_item_attr": [
            "reason_string"
          ],
          "function_for_item": "change",
          "import_item_attr": [
            "reason"
          ],
          "lua_script": "function change()\n            local reason = reason or 0\n            return tostring(reason)\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_BA28B4": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_3",
              "uid"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "app_cluster_uid_str"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "app_cluster_uid_str"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "uid"
          ],
          "lua_script": "function calculate()\n                    app_cluster_uid_str = \"cmt_cluster_app-\" .. tostring(uid) .. \"-KUAISHOU\"\n                    return app_cluster_uid_str\n                end",
          "skip": "{{_if_control_attr_3}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_E4F298": {
          "$metadata": {
            "$input_common_attrs": [
              "device_status_flags"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "battery_charging",
              "battery_level",
              "headset_state",
              "net_state",
              "screen_light"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "screen_light",
            "net_state",
            "battery_level",
            "battery_charging",
            "headset_state"
          ],
          "function_for_common": "split_device_status",
          "import_common_attr": [
            "device_status_flags"
          ],
          "lua_script": "function split_device_status()\n            local device_status_flags = device_status_flags or 0\n            -- 定义示例的device_status_flags值\n\n            -- 从低位到高位提取各个位域的值\n            local screen_light = device_status_flags & 0xFF  -- Bits 0-7，屏幕亮度\n            local net_state = (device_status_flags >> 8) & 0xF  -- Bits 8-11，网络状态\n            local battery_level = (device_status_flags >> 12) & 0xFF  -- Bits 12-19，电池电量\n            local battery_charging = (device_status_flags >> 20) & 0xF  -- Bits 20-23，电池充电状态\n            local headset_state = (device_status_flags >> 24) & 0xF  -- Bits 24-27，耳机状态\n            return screen_light, net_state, battery_level, battery_charging, headset_state\n          end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_E5EF84": {
          "$metadata": {
            "$input_common_attrs": [
              "_if_control_attr_6"
            ],
            "$input_item_attrs": [
              "click_comment_score",
              "long_view_counter_factual_score_cmt",
              "long_view_counter_factual_score_no_cmt"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "playtime_after_click_comment_score"
            ]
          },
          "export_item_attr": [
            "playtime_after_click_comment_score"
          ],
          "function_for_item": "calculate",
          "import_item_attr": [
            "click_comment_score",
            "long_view_counter_factual_score_cmt",
            "long_view_counter_factual_score_no_cmt"
          ],
          "lua_script": "function calculate()\n            return long_view_counter_factual_score_no_cmt \n          end",
          "skip": "{{_if_control_attr_6}}",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_attr_by_lua_EE7C03": {
          "$metadata": {
            "$input_common_attrs": [
              "user_comment_cluster_level_pre"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_comment_cluster_level_pre"
            ],
            "$output_item_attrs": []
          },
          "export_common_attr": [
            "user_comment_cluster_level_pre"
          ],
          "function_for_common": "calculate",
          "import_common_attr": [
            "user_comment_cluster_level_pre"
          ],
          "lua_script": "function calculate()\n                  user_comment_cluster_level_pre = tonumber(user_comment_cluster_level_pre) * 1.0 or 0.0\n                  return {user_comment_cluster_level_pre}\n              end",
          "type_name": "CommonRecoLuaAttrEnricher"
        },
        "enrich_with_protobuf_A5CBD7": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "photo_info"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "author_id"
            ]
          },
          "attrs": [
            {
              "name": "author_id",
              "path": "author.id"
            }
          ],
          "from_extra_var": "photo_info",
          "is_common_attr": false,
          "type_name": "CommonRecoProtobufAttrEnricher"
        },
        "enrich_with_protobuf_A78830": {
          "$metadata": {
            "$input_common_attrs": [
              "user_info"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "BidFollowList",
              "FollowList",
              "collect_hetu_one",
              "collect_hetu_two",
              "collect_photo_ids",
              "comment_hetu_one",
              "comment_hetu_two",
              "comment_photo_ids",
              "device_status_flags",
              "follow_hetu_one",
              "follow_hetu_two",
              "follow_photo_ids",
              "forward_hetu_one",
              "forward_hetu_two",
              "forward_photo_ids",
              "human_action",
              "like_hetu_one",
              "like_hetu_two",
              "like_photo_ids",
              "profile_enter_hetu_one",
              "profile_enter_hetu_two",
              "profile_enter_photo_ids"
            ],
            "$output_item_attrs": []
          },
          "attrs": [
            {
              "name": "like_photo_ids",
              "path": "user_profile_v1.like_list.photo_id"
            },
            {
              "name": "like_hetu_one",
              "path": "user_profile_v1.like_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.like_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "like_hetu_two",
              "path": "user_profile_v1.like_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.like_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "follow_photo_ids",
              "path": "user_profile_v1.follow_list.photo_id"
            },
            {
              "name": "follow_hetu_one",
              "path": "user_profile_v1.follow_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.follow_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "follow_hetu_two",
              "path": "user_profile_v1.follow_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.follow_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "forward_photo_ids",
              "path": "user_profile_v1.forward_list.photo_id"
            },
            {
              "name": "forward_hetu_one",
              "path": "user_profile_v1.forward_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.forward_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "forward_hetu_two",
              "path": "user_profile_v1.forward_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.forward_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "comment_photo_ids",
              "path": "user_profile_v1.comment_list.photo_id"
            },
            {
              "name": "comment_hetu_one",
              "path": "user_profile_v1.comment_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.comment_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "comment_hetu_two",
              "path": "user_profile_v1.comment_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.comment_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "collect_photo_ids",
              "path": "user_profile_v1.collect_list.photo_id"
            },
            {
              "name": "collect_hetu_one",
              "path": "user_profile_v1.collect_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.collect_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "collect_hetu_two",
              "path": "user_profile_v1.collect_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.collect_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "profile_enter_photo_ids",
              "path": "user_profile_v1.profile_enter_list.photo_id"
            },
            {
              "name": "profile_enter_hetu_one",
              "path": "user_profile_v1.profile_enter_list.hetu_tag_level_info.hetu_level_one",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.profile_enter_list.hetu_tag_level_info.hetu_level_one": 1
              }
            },
            {
              "name": "profile_enter_hetu_two",
              "path": "user_profile_v1.profile_enter_list.hetu_tag_level_info.hetu_level_two",
              "repeat_align": true,
              "repeat_limit": {
                "user_profile_v1.profile_enter_list.hetu_tag_level_info.hetu_level_two": 1
              }
            },
            {
              "name": "human_action",
              "path": "device_stat.human_action"
            },
            {
              "name": "device_status_flags",
              "path": "device_stat.device_status_flags"
            },
            {
              "name": "FollowList",
              "path": "user_profile_v1.follow_list.author_id"
            },
            {
              "name": "BidFollowList",
              "path": "friend_info_v2.bid_follow_list.friend_id"
            }
          ],
          "from_extra_var": "user_info",
          "is_common_attr": true,
          "type_name": "CommonRecoProtobufAttrEnricher"
        },
        "extract_kuiba_parameter_5B77CC": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "cascade_pcestr",
              "cascade_pctr",
              "cascade_pepstr",
              "cascade_pftr",
              "cascade_phtr",
              "cascade_pltr",
              "cascade_plvtr",
              "cascade_psvr",
              "cascade_pwtr",
              "empirical_cmtr",
              "empirical_ctr",
              "empirical_ftr",
              "empirical_htr",
              "empirical_ltr",
              "empirical_ptr",
              "empirical_wtr",
              "follow_status",
              "pcltr",
              "pcmef",
              "pcmtr",
              "pctr",
              "pepstr",
              "pftr",
              "phtr",
              "pltr",
              "plvtr",
              "pptr",
              "pvtr",
              "pwtd",
              "pwtr"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "kuiba_item_signs",
              "kuiba_item_slots"
            ]
          },
          "config": {
            "cascade_pcestr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pcestr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1029
                }
              ]
            },
            "cascade_pctr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pctr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1021
                }
              ]
            },
            "cascade_pepstr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pepstr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,1000,-1",
                  "key_type": 1028
                }
              ]
            },
            "cascade_pftr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pftr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,800,-1",
                  "key_type": 1026
                }
              ]
            },
            "cascade_phtr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_phtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,1000,-1",
                  "key_type": 1027
                }
              ]
            },
            "cascade_pltr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,400,-1",
                  "key_type": 1024
                }
              ]
            },
            "cascade_plvtr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_plvtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1022
                }
              ]
            },
            "cascade_psvr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_psvr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,200,-1",
                  "key_type": 1023
                }
              ]
            },
            "cascade_pwtr_0": {
              "attrs": [
                {
                  "attr": [
                    "cascade_pwtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1025
                }
              ]
            },
            "empirical_cmtr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_cmtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1020
                }
              ]
            },
            "empirical_ctr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_ctr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1014
                }
              ]
            },
            "empirical_ftr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_ftr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,800,-1",
                  "key_type": 1016
                }
              ]
            },
            "empirical_htr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_htr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,1000,-1",
                  "key_type": 1019
                }
              ]
            },
            "empirical_ltr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_ltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,400,-1",
                  "key_type": 1015
                }
              ]
            },
            "empirical_ptr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_ptr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,400,-1",
                  "key_type": 1018
                }
              ]
            },
            "empirical_wtr_0": {
              "attrs": [
                {
                  "attr": [
                    "empirical_wtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1017
                }
              ]
            },
            "follow_status": {
              "attrs": [
                {
                  "attr": [
                    "follow_status"
                  ],
                  "converter": "id",
                  "key_type": 27,
                  "mio_slot_key_type": 27
                }
              ]
            },
            "pcltr_0": {
              "attrs": [
                {
                  "attr": [
                    "pcltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1003
                }
              ]
            },
            "pcmef_0": {
              "attrs": [
                {
                  "attr": [
                    "pcmef"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,400,-1",
                  "key_type": 1012
                }
              ]
            },
            "pcmtr_0": {
              "attrs": [
                {
                  "attr": [
                    "pcmtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1009
                }
              ]
            },
            "pctr_0": {
              "attrs": [
                {
                  "attr": [
                    "pctr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1001
                }
              ]
            },
            "pepstr_0": {
              "attrs": [
                {
                  "attr": [
                    "pepstr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,800,-1",
                  "key_type": 1011
                }
              ]
            },
            "pftr_0": {
              "attrs": [
                {
                  "attr": [
                    "pftr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,800,-1",
                  "key_type": 1004
                }
              ]
            },
            "phtr_0": {
              "attrs": [
                {
                  "attr": [
                    "phtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,1000,-1",
                  "key_type": 1010
                }
              ]
            },
            "pltr_0": {
              "attrs": [
                {
                  "attr": [
                    "pltr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,400,-1",
                  "key_type": 1002
                }
              ]
            },
            "plvtr_0": {
              "attrs": [
                {
                  "attr": [
                    "plvtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1006
                }
              ]
            },
            "pptr_0": {
              "attrs": [
                {
                  "attr": [
                    "pptr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1008
                }
              ]
            },
            "pvtr_0": {
              "attrs": [
                {
                  "attr": [
                    "pvtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "1,0,1,200,-1",
                  "key_type": 1007
                }
              ]
            },
            "pwtd_0": {
              "attrs": [
                {
                  "attr": [
                    "pwtd"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.5,0,100,1,0",
                  "key_type": 1013
                }
              ]
            },
            "pwtr_0": {
              "attrs": [
                {
                  "attr": [
                    "pwtr"
                  ],
                  "converter": "discrete",
                  "converter_args": "0.2,0,1,600,-1",
                  "key_type": 1005
                }
              ]
            }
          },
          "is_common_attr": false,
          "parameters_output": "kuiba_item_signs",
          "slot_as_attr_name": false,
          "slots_output": "kuiba_item_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "extract_kuiba_parameter_EC4FA2": {
          "$metadata": {
            "$input_common_attrs": [
              "battery_charging",
              "battery_level",
              "collect_hetu_one",
              "collect_hetu_two",
              "collect_photo_ids",
              "comment_hetu_one",
              "comment_hetu_two",
              "comment_photo_ids",
              "follow_hetu_one",
              "follow_hetu_two",
              "follow_photo_ids",
              "forward_hetu_one",
              "forward_hetu_two",
              "forward_photo_ids",
              "headset_state",
              "human_action",
              "like_hetu_one",
              "like_hetu_two",
              "like_photo_ids",
              "net_state",
              "profile_enter_hetu_one",
              "profile_enter_hetu_two",
              "profile_enter_photo_ids",
              "screen_light"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "kuiba_common_signs",
              "kuiba_common_slots"
            ],
            "$output_item_attrs": []
          },
          "config": {
            "battery_charging": {
              "attrs": [
                {
                  "attr": [
                    "battery_charging"
                  ],
                  "converter": "id",
                  "key_type": 715
                }
              ]
            },
            "battery_level": {
              "attrs": [
                {
                  "attr": [
                    "battery_level"
                  ],
                  "converter": "id",
                  "key_type": 714
                }
              ]
            },
            "collect_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "collect_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 917,
                  "type": 5
                }
              ]
            },
            "collect_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "collect_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 918,
                  "type": 5
                }
              ]
            },
            "collect_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "collect_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 916,
                  "type": 5
                }
              ]
            },
            "comment_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "comment_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 914,
                  "type": 5
                }
              ]
            },
            "comment_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "comment_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 915,
                  "type": 5
                }
              ]
            },
            "comment_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "comment_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 913,
                  "type": 5
                }
              ]
            },
            "follow_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "follow_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 908,
                  "type": 5
                }
              ]
            },
            "follow_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "follow_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 909,
                  "type": 5
                }
              ]
            },
            "follow_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "follow_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 907,
                  "type": 5
                }
              ]
            },
            "forward_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "forward_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 911,
                  "type": 5
                }
              ]
            },
            "forward_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "forward_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 912,
                  "type": 5
                }
              ]
            },
            "forward_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "forward_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 910,
                  "type": 5
                }
              ]
            },
            "headset_state": {
              "attrs": [
                {
                  "attr": [
                    "headset_state"
                  ],
                  "converter": "id",
                  "key_type": 716
                }
              ]
            },
            "human_action": {
              "attrs": [
                {
                  "attr": [
                    "human_action"
                  ],
                  "converter": "id",
                  "key_type": 711
                }
              ]
            },
            "like_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "like_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 905,
                  "type": 5
                }
              ]
            },
            "like_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "like_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 906,
                  "type": 5
                }
              ]
            },
            "like_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "like_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 904,
                  "type": 5
                }
              ]
            },
            "net_state": {
              "attrs": [
                {
                  "attr": [
                    "net_state"
                  ],
                  "converter": "id",
                  "key_type": 713
                }
              ]
            },
            "profile_enter_hetu_one": {
              "attrs": [
                {
                  "attr": [
                    "profile_enter_hetu_one"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 682,
                  "mio_slot_key_type": 920,
                  "type": 5
                }
              ]
            },
            "profile_enter_hetu_two": {
              "attrs": [
                {
                  "attr": [
                    "profile_enter_hetu_two"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 683,
                  "mio_slot_key_type": 921,
                  "type": 5
                }
              ]
            },
            "profile_enter_photo_ids": {
              "attrs": [
                {
                  "attr": [
                    "profile_enter_photo_ids"
                  ],
                  "converter": "list",
                  "converter_args": {
                    "enable_filter": false,
                    "limit": 50,
                    "reversed": false
                  },
                  "key_type": 26,
                  "mio_slot_key_type": 919,
                  "type": 5
                }
              ]
            },
            "screen_light": {
              "attrs": [
                {
                  "attr": [
                    "screen_light"
                  ],
                  "converter": "id",
                  "key_type": 712
                }
              ]
            }
          },
          "is_common_attr": true,
          "parameters_output": "kuiba_common_signs",
          "slot_as_attr_name": false,
          "slots_output": "kuiba_common_slots",
          "type_name": "KuibaParameterAttrEnricher"
        },
        "extract_with_ks_sign_feature_2B4D9B": {
          "$metadata": {
            "$input_common_attrs": [
              "tab_id",
              "user_info"
            ],
            "$input_item_attrs": [
              "cascade_pctr",
              "cascade_pltr",
              "cascade_plvtr",
              "cascade_psvr",
              "context_info",
              "photo_info",
              "reason_string"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "common_signs",
              "common_slots"
            ],
            "$output_item_attrs": [
              "item_signs",
              "item_slots"
            ]
          },
          "cascade_pctr_attr": "cascade_pctr",
          "cascade_pltr_attr": "cascade_pltr",
          "cascade_plvtr_attr": "cascade_plvtr",
          "cascade_psvr_attr": "cascade_psvr",
          "common_parameters_output": "common_signs",
          "common_slots_output": "common_slots",
          "context_info_attr": "context_info",
          "feature_list": [
            "ExtractSignAuthorExpCtr",
            "ExtractSignAuthorExpStat",
            "ExtractSignAuthorId",
            "ExtractSignAuthorId3",
            "ExtractSignAuthorTowerClusterId",
            "ExtractSignCascadePctr",
            "ExtractSignCascadePltr",
            "ExtractSignCascadePlvtr",
            "ExtractSignCascadePsvr",
            "ExtractSignCascadeXctr",
            "ExtractSignPhotoAge",
            "ExtractSignPhotoDuration",
            "ExtractSignPhotoDuration0",
            "ExtractSignPhotoHetuClusterId",
            "ExtractSignPhotoHetuFaceid",
            "ExtractSignPhotoHetuTagOne",
            "ExtractSignPhotoHetuTagOne2",
            "ExtractSignPhotoHetuTagTwo",
            "ExtractSignPhotoHetuTagTwo2",
            "ExtractSignPhotoId",
            "ExtractSignPhotoLogClickCount",
            "ExtractSignPhotoLogLikeCount",
            "ExtractSignPhotoPlayThStat",
            "ExtractSignPhotoShortPlayRateV2",
            "ExtractSignPhotoTag",
            "ExtractSignRecentLongViewPids",
            "ExtractSignRecentRealshowAids",
            "ExtractSignRecentRealshowPids",
            "ExtractSignRecentRealshowTags",
            "ExtractSignRecentRealshowTimestamps",
            "ExtractSignReqTypePage",
            "ExtractSignTabInfo",
            "ExtractSignUserAllGender",
            "ExtractSignUserApplistTotal",
            "ExtractSignUserDeviceId",
            "ExtractSignUserExpRate",
            "ExtractSignUserHetuLevelOneDist",
            "ExtractSignUserHhEffectiveView",
            "ExtractSignUserHhLongView",
            "ExtractSignUserId",
            "ExtractSignUserOrDeviceId",
            "ExtractSignUserProvCity",
            "ExtractSignUserShowCountDay",
            "ExtractSignUserShowCountFiveMinute",
            "ExtractSignUserShowCountHalfHour",
            "ExtractSignUserShowCountHour",
            "ExtractSignUserShowCountMinute",
            "ExtractSignUserShowCountTenMinutes",
            "ExtractSignWatchTimeExpStat",
            "ExtractSignWatchTimeExpStatOnDuration"
          ],
          "item_parameters_output": "item_signs",
          "item_slots_output": "item_slots",
          "photo_info_attr": "photo_info",
          "reason_attr": "reason_string",
          "tab_id_attr": "tab_id",
          "type_name": "MioKsSignFeatureEnricher",
          "user_info_attr": "user_info"
        },
        "filter_by_attr_7C7E66": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "photo_info"
            ],
            "$modify_item_tables": [
              ""
            ],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "attr_name": "photo_info",
          "remove_if_attr_missing": true,
          "type_name": "CommonRecoAttrFilterArranger"
        },
        "get_abtest_params_DC527B": {
          "$metadata": {
            "$input_common_attrs": [
              "_ABTEST_USER_TAG_NAMES_",
              "_ABTEST_USER_TAG_VALUES_"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "enable_long_view_counter_causal_model_gamora",
              "enable_long_view_counter_causal_model_nebula",
              "enable_playtime_causal_debias_model_gamora",
              "enable_playtime_causal_debias_model_nebula",
              "slide_fr_interact_wt_score_infer_norm_gamora",
              "slide_fr_interact_wt_score_infer_norm_nebula"
            ],
            "$output_item_attrs": []
          },
          "ab_params": [
            {
              "default_value": false,
              "param_name": "slide_fr_interact_wt_score_infer_norm_gamora",
              "param_type": "bool"
            },
            {
              "default_value": false,
              "param_name": "slide_fr_interact_wt_score_infer_norm_nebula",
              "param_type": "bool"
            },
            {
              "default_value": false,
              "param_name": "enable_playtime_causal_debias_model_gamora",
              "param_type": "bool"
            },
            {
              "default_value": false,
              "param_name": "enable_playtime_causal_debias_model_nebula",
              "param_type": "bool"
            },
            {
              "default_value": false,
              "param_name": "enable_long_view_counter_causal_model_gamora",
              "param_type": "bool"
            },
            {
              "default_value": false,
              "param_name": "enable_long_view_counter_causal_model_nebula",
              "param_type": "bool"
            }
          ],
          "biz_name": "THANOS_RECO",
          "type_name": "CommonRecoAbtestCommonAttrEnricher"
        },
        "get_common_attr_from_redis_2E3EF0": {
          "$metadata": {
            "$input_common_attrs": [
              "cmt_cluste_uid_str"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_comment_cluster_level_pre"
            ],
            "$output_item_attrs": []
          },
          "cluster_name": "slideLeafRecoHighFansBoost",
          "downstream_processor": "enrich_attr_by_lua_EE7C03",
          "is_async": true,
          "redis_params": [
            {
              "output_attr_name": "user_comment_cluster_level_pre",
              "output_attr_type": "string",
              "redis_key": "{{cmt_cluste_uid_str}}",
              "redis_value_type": "string"
            }
          ],
          "type_name": "CommonRecoRedisCommonAttrEnricher"
        },
        "get_common_attr_from_redis_EF7B4B": {
          "$metadata": {
            "$input_common_attrs": [
              "app_cluster_uid_str"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_app_cluster_level_pre"
            ],
            "$output_item_attrs": []
          },
          "cluster_name": "slideLeafRecoHighFansBoost",
          "downstream_processor": "enrich_attr_by_lua_3CF759",
          "is_async": true,
          "redis_params": [
            {
              "output_attr_name": "user_app_cluster_level_pre",
              "output_attr_type": "string",
              "redis_key": "{{app_cluster_uid_str}}",
              "redis_value_type": "string"
            }
          ],
          "type_name": "CommonRecoRedisCommonAttrEnricher"
        },
        "parse_protobuf_from_string_3C6AC1": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "photo_info_str"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "photo_info"
            ]
          },
          "class_name": "ks.reco.PhotoInfo",
          "input_attr": "photo_info_str",
          "is_common_attr": false,
          "output_attr": "photo_info",
          "type_name": "CommonRecoProtobufParseAttrEnricher"
        },
        "parse_protobuf_from_string_99872F": {
          "$metadata": {
            "$input_common_attrs": [
              "user_info_str"
            ],
            "$input_item_attrs": [],
            "$modify_item_tables": [],
            "$output_common_attrs": [
              "user_info"
            ],
            "$output_item_attrs": []
          },
          "class_name": "ks.reco.UserInfo",
          "input_attr": "user_info_str",
          "is_common_attr": true,
          "output_attr": "user_info",
          "type_name": "CommonRecoProtobufParseAttrEnricher"
        },
        "perflog_attr_value_A7AED4": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "at_comment",
              "click_comment_button",
              "comment_consume_depth",
              "comment_copyward",
              "comment_effective_read",
              "comment_like",
              "comment_slide_down",
              "effective_read_comment_fresh_score",
              "eft_click_cmt",
              "eft_write_cmt",
              "emoji_comment",
              "follow",
              "forward_inside",
              "gif_comment",
              "image_comment",
              "interact_score",
              "playtime_after_click_comment_score",
              "post_at_comment",
              "sub_comment",
              "text_comment",
              "uplift_comment_consume_depth_score",
              "uplift_comment_stay_duration_score"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "check_point": "final.output",
          "item_attrs": [
            "click_comment_button",
            "follow",
            "forward_inside",
            "interact_score",
            "post_at_comment",
            "comment_like",
            "comment_effective_read",
            "comment_copyward",
            "comment_consume_depth",
            "comment_slide_down",
            "uplift_comment_consume_depth_score",
            "uplift_comment_stay_duration_score",
            "sub_comment",
            "emoji_comment",
            "gif_comment",
            "at_comment",
            "image_comment",
            "text_comment",
            "playtime_after_click_comment_score",
            "eft_click_cmt",
            "eft_write_cmt",
            "effective_read_comment_fresh_score"
          ],
          "type_name": "CommonRecoAttrValuePerflogObserver"
        },
        "perflog_attr_value_FBFA32": {
          "$metadata": {
            "$input_common_attrs": [],
            "$input_item_attrs": [
              "click_comment_score",
              "comment_stay_time_score"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": []
          },
          "check_point": "model.output",
          "item_attrs": [
            "click_comment_score",
            "comment_stay_time_score"
          ],
          "type_name": "CommonRecoAttrValuePerflogObserver"
        },
        "uni_predict_fused_1ADBAE": {
          "$metadata": {
            "$input_common_attrs": [
              "common_signs",
              "common_slots",
              "kuiba_common_signs",
              "kuiba_common_slots"
            ],
            "$input_item_attrs": [
              "cascade_pcestrs",
              "cascade_pctrs",
              "cascade_pepstrs",
              "cascade_pftrs",
              "cascade_phtrs",
              "cascade_pltrs",
              "cascade_plvtrs",
              "cascade_psvrs",
              "cascade_pwtrs",
              "empirical_cmtrs",
              "empirical_ctrs",
              "empirical_ftrs",
              "empirical_htrs",
              "empirical_ltrs",
              "empirical_ptrs",
              "empirical_wtrs",
              "item_signs",
              "item_slots",
              "kuiba_item_signs",
              "kuiba_item_slots",
              "pcltrs",
              "pcmefs",
              "pcmtrs",
              "pctrs",
              "pepstrs",
              "pftrs",
              "phtrs",
              "pltrs",
              "plvtrs",
              "pptrs",
              "pvtrs",
              "pwtds",
              "pwtrs",
              "tab_id",
              "user_app_cluster_level",
              "user_comment_cluster_level"
            ],
            "$modify_item_tables": [],
            "$output_common_attrs": [],
            "$output_item_attrs": [
              "at_comment",
              "click_comment_score",
              "comment_consume_depth",
              "comment_copyward",
              "comment_effective_read",
              "comment_like",
              "comment_slide_down",
              "comment_stay_time_score",
              "comment_unfold",
              "effective_read_comment_fresh_score",
              "eft_click_cmt",
              "eft_write_cmt",
              "emoji_comment",
              "follow",
              "forward_inside",
              "gif_comment",
              "image_comment",
              "interact_score",
              "long_view_counter_factual_score_cmt",
              "long_view_counter_factual_score_no_cmt",
              "playtime_after_click_comment_score",
              "sub_comment",
              "text_comment",
              "uplift_comment_consume_depth_score",
              "uplift_comment_stay_duration_score"
            ]
          },
          "batching_config": {
            "batch_task_type": "BatchTensorflowTask",
            "batch_timeout_micros": 0,
            "max_batch_size": 2048,
            "max_enqueued_batches": 1
          },
          "embedding_fetchers": [
            {
              "colossusdb_embd_service_name": "interact_comment_user_cluster_debias",
              "colossusdb_embd_table_name": "interact_user_cluster_debias_emb",
              "common_parameters_inputs": [
                "common_signs",
                "kuiba_common_signs"
              ],
              "common_slots_inputs": [
                "common_slots",
                "kuiba_common_slots"
              ],
              "fetcher_type": "ColossusdbEmbeddingServerFetcher",
              "max_signs_per_request": 500,
              "parameters_inputs": [
                "item_signs",
                "kuiba_item_signs"
              ],
              "slots_config": [
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "pid_emb",
                  "slots": "26",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "aid_emb",
                  "slots": "128 27",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_xtr",
                  "slots": "576 577 578 579 567 71 142",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_stat",
                  "slots": "110 185 685 686 673 1118 141",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_hetu",
                  "slots": "682 683",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_cnt",
                  "slots": "786 787",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_pxtr",
                  "slots": "1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "top_bias",
                  "slots": "498 143 603 3621",
                  "tensor_dtype": "float32"
                },
                {
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "pid_play_f",
                  "slots": "146 147 288 418",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "uid_emb",
                  "slots": "38 34",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "uid_stat",
                  "slots": "184 35 189",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "did_stat",
                  "slots": "711 712 713 714 715 716",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "uid_live_f",
                  "slots": "676 677 678 679 680 681",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "input_name": "uid_loc_f",
                  "slots": "182 603",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "input_name": "uid_viewid_f",
                  "slots": "290 291",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "realshow_tags",
                  "slots": "249",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "short_term_pids",
                  "slots": "246",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "short_term_aids",
                  "slots": "247",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "short_term_times",
                  "slots": "250",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_like_list_id",
                  "slots": "904",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_like_list_hetu1",
                  "slots": "905",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_like_list_hetu2",
                  "slots": "906",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_follow_list_id",
                  "slots": "907",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_follow_list_hetu1",
                  "slots": "908",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_follow_list_hetu2",
                  "slots": "909",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_forward_list_id",
                  "slots": "910",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_forward_list_hetu1",
                  "slots": "911",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_forward_list_hetu2",
                  "slots": "912",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_comment_list_id",
                  "slots": "913",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_comment_list_hetu1",
                  "slots": "914",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_comment_list_hetu2",
                  "slots": "915",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_collect_list_id",
                  "slots": "916",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_collect_list_hetu1",
                  "slots": "917",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_collect_list_hetu2",
                  "slots": "918",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 32,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_profile_enter_list_id",
                  "slots": "919",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_profile_enter_list_hetu1",
                  "slots": "920",
                  "tensor_dtype": "float32"
                },
                {
                  "compress_group": "USER",
                  "dim": 8,
                  "dtype": "mio_int16",
                  "expand": 50,
                  "input_name": "uid_profile_enter_list_hetu2",
                  "slots": "921",
                  "tensor_dtype": "float32"
                }
              ],
              "slots_inputs": [
                "item_slots",
                "kuiba_item_slots"
              ],
              "timeout_ms": 50
            }
          ],
          "executor_config": {
            "inter_op_parallelism_threads_num": 32,
            "intra_op_parallelism_threads_num": 32
          },
          "graph": "base64:",
          "inputs": [
            {
              "attr_name": "pid_emb",
              "dim": 32,
              "tensor_name": "pid_emb"
            },
            {
              "attr_name": "aid_emb",
              "dim": 64,
              "tensor_name": "aid_emb"
            },
            {
              "attr_name": "pid_xtr",
              "dim": 56,
              "tensor_name": "pid_xtr"
            },
            {
              "attr_name": "pid_stat",
              "dim": 56,
              "tensor_name": "pid_stat"
            },
            {
              "attr_name": "pid_hetu",
              "dim": 16,
              "tensor_name": "pid_hetu"
            },
            {
              "attr_name": "pid_cnt",
              "dim": 16,
              "tensor_name": "pid_cnt"
            },
            {
              "attr_name": "pid_pxtr",
              "dim": 232,
              "tensor_name": "pid_pxtr"
            },
            {
              "attr_name": "top_bias",
              "dim": 32,
              "tensor_name": "top_bias"
            },
            {
              "attr_name": "pid_play_f",
              "dim": 32,
              "tensor_name": "pid_play_f"
            },
            {
              "attr_name": "uid_emb",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "uid_emb"
            },
            {
              "attr_name": "uid_stat",
              "compress_group": "USER",
              "dim": 24,
              "tensor_name": "uid_stat"
            },
            {
              "attr_name": "did_stat",
              "compress_group": "USER",
              "dim": 48,
              "tensor_name": "did_stat"
            },
            {
              "attr_name": "uid_live_f",
              "compress_group": "USER",
              "dim": 48,
              "tensor_name": "uid_live_f"
            },
            {
              "attr_name": "uid_loc_f",
              "compress_group": "USER",
              "dim": 16,
              "tensor_name": "uid_loc_f"
            },
            {
              "attr_name": "uid_viewid_f",
              "compress_group": "USER",
              "dim": 64,
              "tensor_name": "uid_viewid_f"
            },
            {
              "attr_name": "realshow_tags",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "realshow_tags"
            },
            {
              "attr_name": "short_term_pids",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "short_term_pids"
            },
            {
              "attr_name": "short_term_aids",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "short_term_aids"
            },
            {
              "attr_name": "short_term_times",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "short_term_times"
            },
            {
              "attr_name": "uid_like_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_like_list_id"
            },
            {
              "attr_name": "uid_like_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_like_list_hetu1"
            },
            {
              "attr_name": "uid_like_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_like_list_hetu2"
            },
            {
              "attr_name": "uid_follow_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_follow_list_id"
            },
            {
              "attr_name": "uid_follow_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_follow_list_hetu1"
            },
            {
              "attr_name": "uid_follow_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_follow_list_hetu2"
            },
            {
              "attr_name": "uid_forward_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_forward_list_id"
            },
            {
              "attr_name": "uid_forward_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_forward_list_hetu1"
            },
            {
              "attr_name": "uid_forward_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_forward_list_hetu2"
            },
            {
              "attr_name": "uid_comment_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_comment_list_id"
            },
            {
              "attr_name": "uid_comment_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_comment_list_hetu1"
            },
            {
              "attr_name": "uid_comment_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_comment_list_hetu2"
            },
            {
              "attr_name": "uid_collect_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_collect_list_id"
            },
            {
              "attr_name": "uid_collect_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_collect_list_hetu1"
            },
            {
              "attr_name": "uid_collect_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_collect_list_hetu2"
            },
            {
              "attr_name": "uid_profile_enter_list_id",
              "compress_group": "USER",
              "dim": 1600,
              "tensor_name": "uid_profile_enter_list_id"
            },
            {
              "attr_name": "uid_profile_enter_list_hetu1",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_profile_enter_list_hetu1"
            },
            {
              "attr_name": "uid_profile_enter_list_hetu2",
              "compress_group": "USER",
              "dim": 400,
              "tensor_name": "uid_profile_enter_list_hetu2"
            },
            {
              "attr_name": "pctrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pctr"
            },
            {
              "attr_name": "pltrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pltr"
            },
            {
              "attr_name": "pcltrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pcltr"
            },
            {
              "attr_name": "pftrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pftr"
            },
            {
              "attr_name": "pwtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pwtr"
            },
            {
              "attr_name": "plvtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "plvtr"
            },
            {
              "attr_name": "pvtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pvtr"
            },
            {
              "attr_name": "pptrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pptr"
            },
            {
              "attr_name": "pcmtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pcmtr"
            },
            {
              "attr_name": "phtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "phtr"
            },
            {
              "attr_name": "pepstrs",
              "common": false,
              "dim": 1,
              "tensor_name": "pepstr"
            },
            {
              "attr_name": "pcmefs",
              "common": false,
              "dim": 1,
              "tensor_name": "pcmef"
            },
            {
              "attr_name": "pwtds",
              "common": false,
              "dim": 1,
              "tensor_name": "pwtd"
            },
            {
              "attr_name": "empirical_ctrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_ctr"
            },
            {
              "attr_name": "empirical_ltrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_ltr"
            },
            {
              "attr_name": "empirical_ftrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_ftr"
            },
            {
              "attr_name": "empirical_wtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_wtr"
            },
            {
              "attr_name": "empirical_ptrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_ptr"
            },
            {
              "attr_name": "empirical_htrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_htr"
            },
            {
              "attr_name": "empirical_cmtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "empirical_cmtr"
            },
            {
              "attr_name": "cascade_pctrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pctr"
            },
            {
              "attr_name": "cascade_plvtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_plvtr"
            },
            {
              "attr_name": "cascade_psvrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_psvr"
            },
            {
              "attr_name": "cascade_pltrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pltr"
            },
            {
              "attr_name": "cascade_pwtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pwtr"
            },
            {
              "attr_name": "cascade_pftrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pftr"
            },
            {
              "attr_name": "cascade_phtrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_phtr"
            },
            {
              "attr_name": "cascade_pepstrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pepstr"
            },
            {
              "attr_name": "cascade_pcestrs",
              "common": false,
              "dim": 1,
              "tensor_name": "cascade_pcestr"
            },
            {
              "attr_name": "user_comment_cluster_level",
              "common": false,
              "dim": 1,
              "tensor_name": "user_comment_cluster_level"
            },
            {
              "attr_name": "user_app_cluster_level",
              "common": false,
              "dim": 1,
              "tensor_name": "user_app_cluster_level"
            },
            {
              "attr_name": "tab_id",
              "common": false,
              "dim": 1,
              "tensor_name": "tab_id"
            }
          ],
          "key": "slide_multi_task_comment_user_cluster_debias",
          "model_loader_config": {
            "executor_batchsizes": [
              512,
              1024,
              2048
            ],
            "implicit_batch": true,
            "receive_dnn_model_as_macro_block": true,
            "rowmajor": true,
            "type": "MioTFExecutedByTensorFlowModelLoader"
          },
          "outputs": [
            {
              "attr_name": "click_comment_score",
              "tensor_name": "model/split:3"
            },
            {
              "attr_name": "comment_stay_time_score",
              "tensor_name": "model/split:4"
            },
            {
              "attr_name": "follow",
              "tensor_name": "model/split:0"
            },
            {
              "attr_name": "forward_inside",
              "tensor_name": "model/split:1"
            },
            {
              "attr_name": "interact_score",
              "tensor_name": "model/split:2"
            },
            {
              "attr_name": "comment_unfold",
              "tensor_name": "mul_2:0"
            },
            {
              "attr_name": "comment_like",
              "tensor_name": "mul_3:0"
            },
            {
              "attr_name": "comment_copyward",
              "tensor_name": "mul_4:0"
            },
            {
              "attr_name": "comment_effective_read",
              "tensor_name": "mul_5:0"
            },
            {
              "attr_name": "comment_consume_depth",
              "tensor_name": "mul_6:0"
            },
            {
              "attr_name": "comment_slide_down",
              "tensor_name": "mul_7:0"
            },
            {
              "attr_name": "uplift_comment_consume_depth_score",
              "tensor_name": "mul_8:0"
            },
            {
              "attr_name": "uplift_comment_stay_duration_score",
              "tensor_name": "mul_9:0"
            },
            {
              "attr_name": "playtime_after_click_comment_score",
              "tensor_name": "model/split:22"
            },
            {
              "attr_name": "effective_read_comment_fresh_score",
              "tensor_name": "model/split:19"
            },
            {
              "attr_name": "long_view_counter_factual_score_cmt",
              "tensor_name": "model/split:22"
            },
            {
              "attr_name": "long_view_counter_factual_score_no_cmt",
              "tensor_name": "model/split:23"
            },
            {
              "attr_name": "sub_comment",
              "tensor_name": "model/split:9"
            },
            {
              "attr_name": "emoji_comment",
              "tensor_name": "model/split:10"
            },
            {
              "attr_name": "gif_comment",
              "tensor_name": "model/split:11"
            },
            {
              "attr_name": "at_comment",
              "tensor_name": "model/split:12"
            },
            {
              "attr_name": "image_comment",
              "tensor_name": "model/split:13"
            },
            {
              "attr_name": "text_comment",
              "tensor_name": "model/split:14"
            },
            {
              "attr_name": "eft_click_cmt",
              "tensor_name": "model/split:20"
            },
            {
              "attr_name": "eft_write_cmt",
              "tensor_name": "model/split:21"
            }
          ],
          "param": [
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "like_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "like_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "collect_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "collect_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "collect_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "collect_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "collect_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "collect_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "profile_enter_seq_attention/dense/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "profile_enter_seq_attention/dense/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "profile_enter_seq_attention/dense_1/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "profile_enter_seq_attention/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "profile_enter_seq_attention/dense_2/kernel",
              "rown": 48,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "profile_enter_seq_attention/dense_2/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "follow_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "follow_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_inside_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_inside_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_inside_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_inside_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_inside_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_inside_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "forward_inside_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "forward_inside_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "interact_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "interact_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "interact_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "interact_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "interact_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "interact_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "interact_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "interact_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "click_comment_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "click_comment_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "click_comment_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "click_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "click_comment_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "click_comment_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "click_comment_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "click_comment_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_time_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_time_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_time_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_time_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_time_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_time_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_time_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_time_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_cmt_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_cmt_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_cmt_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_cmt_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_cmt_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_cmt_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_cmt_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_cmt_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_no_cmt_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_no_cmt_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_no_cmt_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_no_cmt_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_no_cmt_layers/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_no_cmt_layers/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "long_view_wiz_no_cmt_layers/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "long_view_wiz_no_cmt_layers/dense_3/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_top_net_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_top_net_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_top_net_cluster_gate/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_top_net_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_top_net/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_top_net/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_top_net/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_top_net/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "uplift_comment_consume_depth_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "uplift_comment_consume_depth_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "uplift_comment_consume_depth_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "uplift_comment_consume_depth_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "uplift_comment_stay_duration_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "uplift_comment_stay_duration_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "uplift_comment_stay_duration_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "uplift_comment_stay_duration_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "effective_read_comment_fresh_label_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "effective_read_comment_fresh_label_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "effective_read_comment_fresh_label_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "effective_read_comment_fresh_label_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit_cluster_gate/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit_cluster_gate/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit_cluster_gate/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit_cluster_gate/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit_cluster_gate/dense_3/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_unfold_score_logit/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_unfold_score_logit/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit_cluster_gate/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit_cluster_gate/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit_cluster_gate/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit_cluster_gate/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit_cluster_gate/dense_3/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_like_score_logit/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_like_score_logit/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit_cluster_gate/dense_3/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_content_copyward_score_logit/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_content_copyward_score_logit/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit_cluster_gate/dense_3/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_effective_read_score_logit/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_effective_read_score_logit/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit_cluster_gate/dense/kernel",
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit_cluster_gate/dense/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_1/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_2/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_2/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_3/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit_cluster_gate/dense_3/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_slide_down_score_logit/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_slide_down_score_logit/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "eft_click_cmt/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "eft_click_cmt/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "eft_click_cmt/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "eft_click_cmt/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "eft_write_cmt/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "eft_write_cmt/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "eft_write_cmt/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "eft_write_cmt/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 256,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_genre_layers/dense/kernel",
              "rown": 1072,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_genre_layers/dense/bias",
              "rank": 1,
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 128,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "comment_genre_layers/dense_1/kernel",
              "rown": 256,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "comment_genre_layers/dense_1/bias",
              "rank": 1,
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "sub_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "sub_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "sub_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "sub_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "emoji_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "emoji_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "emoji_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "emoji_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "gif_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "gif_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "gif_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "gif_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "at_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "at_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "at_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "at_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "image_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "image_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "image_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "image_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "text_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "text_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "text_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "text_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "video_comment_layers/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "video_comment_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "video_comment_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "video_comment_layers/dense_1/bias",
              "rank": 1,
              "rown": 1,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "context_aware_logits_layers/dense/kernel",
              "rown": 24,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "context_aware_logits_layers/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 24,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "context_aware_logits_layers/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "context_aware_logits_layers/dense_1/bias",
              "rank": 1,
              "rown": 24,
              "scale_by_rown": true
            },
            {
              "coln": 64,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "tpm_comment_consume_depth_pred/dense/kernel",
              "rown": 128,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "tpm_comment_consume_depth_pred/dense/bias",
              "rank": 1,
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 32,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "tpm_comment_consume_depth_pred/dense_1/kernel",
              "rown": 64,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "tpm_comment_consume_depth_pred/dense_1/bias",
              "rank": 1,
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 7,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 1,
              "name": "tpm_comment_consume_depth_pred/dense_2/kernel",
              "rown": 32,
              "scale_by_rown": true
            },
            {
              "coln": 1,
              "dtype": "float32",
              "init_mean": 0,
              "init_range": 0,
              "name": "tpm_comment_consume_depth_pred/dense_2/bias",
              "rank": 1,
              "rown": 7,
              "scale_by_rown": true
            }
          ],
          "queue_prefix": "slide_multi_task_comment_user_cluster_debias",
          "type_name": "UniPredictFusedItemAttrEnricher"
        }
      },
      "type_name": "CommonRecoPipeline"
    },
    "pipeline_map": {
      "predict_sub_flow": {
        "__PARENT": "base_pipeline",
        "pipeline": [
          "extract_with_ks_sign_feature_2B4D9B",
          "extract_kuiba_parameter_EC4FA2",
          "extract_kuiba_parameter_5B77CC",
          "enrich_attr_by_lua_98D0CC",
          "uni_predict_fused_1ADBAE"
        ]
      },
      "slide_multi_task_comment_user_cluster_debias": {
        "__PARENT": "base_pipeline",
        "pipeline": [
          "deduplicate_BBE8FF",
          "parse_protobuf_from_string_99872F",
          "parse_protobuf_from_string_3C6AC1",
          "filter_by_attr_7C7E66",
          "enrich_attr_by_lua_ACBBF1",
          "build_protobuf_247E20",
          "enrich_with_protobuf_A78830",
          "enrich_attr_by_lua_E4F298",
          "enrich_with_protobuf_A5CBD7",
          "copy_user_meta_info_1D895F",
          "enrich_attr_by_lua_5A68C9",
          "_branch_controller_E8369171",
          "enrich_attr_by_lua_81376C",
          "_branch_controller_65D2AB26",
          "enrich_attr_by_lua_070FF6",
          "get_common_attr_from_redis_2E3EF0",
          "enrich_attr_by_lua_EE7C03",
          "copy_attr_0F4C86",
          "_branch_controller_E8369171_1",
          "enrich_attr_by_lua_BA28B4",
          "_branch_controller_65D2AB26_1",
          "enrich_attr_by_lua_3C7399",
          "get_common_attr_from_redis_EF7B4B",
          "enrich_attr_by_lua_3CF759",
          "copy_attr_776BC1",
          "copy_attr_145969",
          "arrange_by_sub_flow_43BCA6",
          "get_abtest_params_DC527B",
          "perflog_attr_value_FBFA32",
          "_branch_controller_7227719B",
          "enrich_attr_by_lua_A17D98",
          "enrich_attr_by_lua_32B148",
          "_branch_controller_182D0D1D",
          "enrich_attr_by_lua_E5EF84",
          "_branch_controller_7C491A0A",
          "calc_by_formula1_20B962",
          "_branch_controller_D7CB6857",
          "calc_by_formula1_D22215",
          "perflog_attr_value_A7AED4"
        ]
      }
    }
  },
  "request_type_config": {
    "slide_multi_task_comment_user_cluster_debias": [
      "slide_multi_task_comment_user_cluster_debias"
    ]
  },
  "return_item_attrs": [
    "at_comment",
    "click_comment_button",
    "click_comment_score",
    "comment_consume_depth",
    "comment_copyward",
    "comment_effective_read",
    "comment_like",
    "comment_slide_down",
    "effective_read_comment_fresh_score",
    "eft_click_cmt",
    "eft_write_cmt",
    "emoji_comment",
    "follow",
    "forward_inside",
    "gif_comment",
    "image_comment",
    "interact_score",
    "playtime_after_click_comment_score",
    "post_at_comment",
    "sub_comment",
    "text_comment",
    "uplift_comment_consume_depth_score",
    "uplift_comment_stay_duration_score"
  ]
}